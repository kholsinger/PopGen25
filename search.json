[
  {
    "objectID": "readings.html",
    "href": "readings.html",
    "title": "Readings",
    "section": "",
    "text": "Leu et al, 2020: URL, PDF"
  },
  {
    "objectID": "readings.html#week-1",
    "href": "readings.html#week-1",
    "title": "Readings",
    "section": "",
    "text": "Leu et al, 2020: URL, PDF"
  },
  {
    "objectID": "notes/Lecture3.html#many-places-we-simplified",
    "href": "notes/Lecture3.html#many-places-we-simplified",
    "title": "Lecture 3",
    "section": "Many places we simplified",
    "text": "Many places we simplified\nWF expectation is for a steady state - populations frequently undergo bottlenecks.\n\nSelection causes signals identical to bottlenecks - could perpetually keep \\(N_E\\) depressed.\n\n\nAssumption is that the loci used to calculate \\(\\pi\\) are independent - they are not.\n\n\nWF expectation from simple model of mutation - mutations are more complex."
  },
  {
    "objectID": "notes/Lecture3.html#more-complex-models-of-mutation",
    "href": "notes/Lecture3.html#more-complex-models-of-mutation",
    "title": "Lecture 3",
    "section": "More complex models of mutation",
    "text": "More complex models of mutation\nThe model of mutation we have used so far is the simplest possible - a single parameter (\\(\\mu\\)) with equal backwards and forwards mutation rates.\n\nWorks great for the ephemeral “loci” before we knew what genes actually were.\n\n\nMore realistically: we need to consider a molecular model."
  },
  {
    "objectID": "notes/Lecture3.html#jukes-cantor-jc69",
    "href": "notes/Lecture3.html#jukes-cantor-jc69",
    "title": "Lecture 3",
    "section": "Jukes-Cantor (JC69)",
    "text": "Jukes-Cantor (JC69)\nOne step up from our biallelic model is recognizing that there are, actually, four bases possible.\n\nWe can think of these mutation rates along a _state _di\n\n\n{dot} digraph G { layout=circo A T C G A -&gt; C [label=“μ”] A -&gt; T [label=“μ”] A -&gt; G [label=“μ”] C -&gt; T [label=“μ”] C -&gt; G [label=“μ”] C -&gt; A [label=“μ”] T -&gt; G [label=“μ”] T -&gt; A [label=“μ”] T -&gt; C [label=“μ”] G -&gt; A [label=“μ”] G -&gt; C [label=“μ”] G -&gt; T [label=“μ”] }"
  },
  {
    "objectID": "notes/Lecture3.html#a-series-of-increasingly-more-complicated-models",
    "href": "notes/Lecture3.html#a-series-of-increasingly-more-complicated-models",
    "title": "Lecture 3",
    "section": "A series of increasingly more complicated models",
    "text": "A series of increasingly more complicated models\nMore complex models have more parameters, distinguishing between transitions and transversion (Kimura 1981, K81).\n\nAnd allowing for different expected base frequencies (Felsenstein 81).\n\n\nAnd specifying mutation/base frequencies for the type of sequence (HIV, MT models, etc)\n\n\nUp to each mutation rate/base rate being specified.\n\n\nThat’s 12 mutation rates and four bases, for 16 parameters!"
  },
  {
    "objectID": "notes/Lecture3.html#most-practical-model-gtr",
    "href": "notes/Lecture3.html#most-practical-model-gtr",
    "title": "Lecture 3",
    "section": "Most practical model: GTR",
    "text": "Most practical model: GTR\nThe General Time Reversible model still has 10 parameters, but they are simpler.\n{dot} digraph G { layout=circo A T C G A -&gt; C [label=“μ1”] A -&gt; T [label=“μ2”] A -&gt; G [label=“μ3”] C -&gt; T [label=“μ4”] C -&gt; G [label=“μ5”] C -&gt; A [label=“μ1”] T -&gt; G [label=“μ6”] T -&gt; A [label=“μ2”] T -&gt; C [label=“μ4”] G -&gt; A [label=“μ4”] G -&gt; C [label=“μ5”] G -&gt; T [label=“μ6”] }\n\nTime reversible because probability forward and back is the same."
  },
  {
    "objectID": "notes/Lecture3.html#will-we-use-these-more-complex-models",
    "href": "notes/Lecture3.html#will-we-use-these-more-complex-models",
    "title": "Lecture 3",
    "section": "Will we use these more complex models?",
    "text": "Will we use these more complex models?\nWhen possible, we’ll use a single parameter model.\n\nMost population genomics approaches, however, will try to fit a model to your data.\n\n\niqTree2 for instance, has ModelFinder which will try to detect the type of sequence and most appropriate evolutionary model."
  },
  {
    "objectID": "notes/Lecture1.html#welcome-to-the-class",
    "href": "notes/Lecture1.html#welcome-to-the-class",
    "title": "Lecture 1",
    "section": "Welcome to the class",
    "text": "Welcome to the class\n\nWelcome to Population Genetics, EEB5348!\nBefore we begin, some general logistics of the course.\nThe course will consist of a weekly lectures, paper/methods discussions and a lab.\n\nTrying out a bunch of new approaches - format might change if it feels like things are not working well."
  },
  {
    "objectID": "notes/Lecture1.html#introduce-yourselves",
    "href": "notes/Lecture1.html#introduce-yourselves",
    "title": "Lecture 1",
    "section": "Introduce yourselves!",
    "text": "Introduce yourselves!"
  },
  {
    "objectID": "notes/Lecture1.html#grading",
    "href": "notes/Lecture1.html#grading",
    "title": "Lecture 1",
    "section": "Grading",
    "text": "Grading\n\nGrades will consist of\n\nParticipation in discussions. (24%)\nWeekly lab assignments/quizzes. (24%)\nTwo minor analyses of a dataset. (25%)\nOne final project. (25%)\n\nAnd two free points!"
  },
  {
    "objectID": "notes/Lecture1.html#assignmentsproject",
    "href": "notes/Lecture1.html#assignmentsproject",
    "title": "Lecture 1",
    "section": "Assignments/Project",
    "text": "Assignments/Project\nThe goal is to create a small set of scripts that you have for many basic population genetics tasks.\n\nWe will assume you have called variants somehow. We sadly don’t have time to teach you how to call variants on the many sequencing approaches one could take (see Jill Wegrzin’s EEB XXXX for that!).\n\n\nYou will develop scripts to calculate basic population genetic statistics, plot them, and perform statistical comparisons when possible in each weekly lab.\n\n\nTwo incremental code based submissions in which I’ll test your code on different data than used in class."
  },
  {
    "objectID": "notes/Lecture1.html#project-cntd.",
    "href": "notes/Lecture1.html#project-cntd.",
    "title": "Lecture 1",
    "section": "Project cntd.",
    "text": "Project cntd.\nYour term project will be to fully analyze the genetics of a population of your choice.\n- Examine genetic diversity and its distribution\n- Run basic demographic analysis\n- Selection scans\n- etc. . . .\nYou will meet with me half-way through the semester to decide on a tractable data-set, or I will provide you one"
  },
  {
    "objectID": "notes/Lecture1.html#im-suddenly-worried-i-dont-have-the-background-for-this-class",
    "href": "notes/Lecture1.html#im-suddenly-worried-i-dont-have-the-background-for-this-class",
    "title": "Lecture 1",
    "section": "I’m suddenly worried I don’t have the background for this class",
    "text": "I’m suddenly worried I don’t have the background for this class\nDon’t panic!\nThe goal of this course is to build your evolutionary intuition as well as knowledge of what different population genetic tools do. AI ramble goes here\n\nBe comfortable asking questions!\n\n\nMini boot-camp on programming this week, math we’ll try to introduce as we go."
  },
  {
    "objectID": "notes/Lecture1.html#what-language-should-i-code-in",
    "href": "notes/Lecture1.html#what-language-should-i-code-in",
    "title": "Lecture 1",
    "section": "What language should I code in?",
    "text": "What language should I code in?\nThe nature of this course is to help you develop tools useful for you, and so no single language is being prescribed.\n\nI will write code primarily in Julia, but pretty much anything here should be achievable easily in R or python, and with a bit more elbow grease in any language you desire.\n\n\nBeyond that you will need at least a passing familiarity with bash, as some of the tools we’ll run are only really accessible via command-line."
  },
  {
    "objectID": "notes/Lecture1.html#schedule",
    "href": "notes/Lecture1.html#schedule",
    "title": "Lecture 1",
    "section": "Schedule",
    "text": "Schedule\n\n12 regular weeks, 2 project focused\nYou can find an updated schedule on the course website\nLast two weeks - students’ choice!"
  },
  {
    "objectID": "notes/Lecture1.html#questions",
    "href": "notes/Lecture1.html#questions",
    "title": "Lecture 1",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "notes/Lecture1.html#what-is-population-genetics",
    "href": "notes/Lecture1.html#what-is-population-genetics",
    "title": "Lecture 1",
    "section": "What is population genetics?",
    "text": "What is population genetics?\nPopulation genetics is the anvil on which evolutionary intuition is developed.\n\nMany verbal models that sound reasonable work contrary to your ideas once spelled out.\n\n\nPop-gen models specifically consider how evolution actually proceeds and affects genetic variation."
  },
  {
    "objectID": "notes/Lecture1.html#what-are-models",
    "href": "notes/Lecture1.html#what-are-models",
    "title": "Lecture 1",
    "section": "What are models?",
    "text": "What are models?\nA model is a simplified version of reality.\n\nIn pop gen, we generally deal with three “types” of models:\n\nExplanatory - how does this system work?\nPredictive - what will happen in the future?\nStatistical - how well is the data represented by a model?\n\n\n\nThe same model can really have both explanatory and predictive power (and be used as the backbone for a statistical model)."
  },
  {
    "objectID": "notes/Lecture1.html#why-we-model-a-historical-example",
    "href": "notes/Lecture1.html#why-we-model-a-historical-example",
    "title": "Lecture 1",
    "section": "Why we model: a historical example",
    "text": "Why we model: a historical example\nImagine a population with two types of butterflies: red and white.\n\nYou, as a geneticist, work out the underlying control. You find the trait is controlled by a single gene, and is biallelic.\n\n\nAn allele is just a variant at some heritable site. It could be a single mutation, or a whole complex of co-inherited variants.\n\n\nBiallelic sites are limited to two alleles.\n\n\nYou work out that AA and Aa butterflies are red, aa are white.\n\n\nWhat will happen to the color in the long run?"
  },
  {
    "objectID": "notes/Lecture1.html#testing-your-intuition",
    "href": "notes/Lecture1.html#testing-your-intuition",
    "title": "Lecture 1",
    "section": "Testing your intuition",
    "text": "Testing your intuition\nRecall: Aa and AA are red, aa are white."
  },
  {
    "objectID": "notes/Lecture1.html#how-do-you-compare-to-early-20th-century-geneticists",
    "href": "notes/Lecture1.html#how-do-you-compare-to-early-20th-century-geneticists",
    "title": "Lecture 1",
    "section": "How do you compare to early 20th century geneticists?",
    "text": "How do you compare to early 20th century geneticists?\nIt was broadly believed that dominant alleles should become more common.\nThe dominance itself was held as a selective advantage (the trait is “stronger”).\nIt took a mathematician to point out that there’s absolutely no reason dominance should have an advantage in inheritance of the allele."
  },
  {
    "objectID": "notes/Lecture1.html#testing-intuition-with-a-model",
    "href": "notes/Lecture1.html#testing-intuition-with-a-model",
    "title": "Lecture 1",
    "section": "Testing intuition with a model",
    "text": "Testing intuition with a model\nModels begin by simplifying the world as much as possible. Given what we know about the system:\n\nSingle locus\nDiploid\nSexually reproducing\n\n\nLet’s get rid of other potential factors\n\nOnly dominance, no other fitness differences\nNo mutation\nNo migration/multiple populations\nPopulation large enough we don’t need to worry about drift\nCompletely random mating"
  },
  {
    "objectID": "notes/Lecture1.html#modeling-tips-and-tricks",
    "href": "notes/Lecture1.html#modeling-tips-and-tricks",
    "title": "Lecture 1",
    "section": "Modeling tips and tricks",
    "text": "Modeling tips and tricks\nIt’s often useful to draw out a diagram of what your system looks like.\n\nThis lets you see what forces are relevant, what you can potentially simplify, etc."
  },
  {
    "objectID": "notes/Lecture1.html#now-lets-define-what-we-are-interested-in",
    "href": "notes/Lecture1.html#now-lets-define-what-we-are-interested-in",
    "title": "Lecture 1",
    "section": "Now let’s define what we are interested in",
    "text": "Now let’s define what we are interested in\nWe want to know how the frequency of white butterflies \\(P_{white}\\) will change.\n\nLet \\(p\\) be the frequency of the A allele. Then \\(q=1-p\\) is the frequency of a.\n\n\nWe also know that \\(P_{white} = P_{AA}+P_{Aa}\\)\nWhat will \\(P_{white}'\\) be?\n\n\nWe often denote the next step/generation with a tick (`)\n\n\nTime for chalkboard!"
  },
  {
    "objectID": "notes/Lecture1.html#what-we-should-have-derived",
    "href": "notes/Lecture1.html#what-we-should-have-derived",
    "title": "Lecture 1",
    "section": "What we should have derived",
    "text": "What we should have derived\n\\(P_{white}' = p*p+p*(1-p)+(1-p)*p= p^2+2pq\\)\nAnd additionally:\n\\(p' = P_{AA} + 1/2 P_{Aa} = p\\)\nSo after one generation, you’ll always have \\(P_{white}=p^2+2pq\\)"
  },
  {
    "objectID": "notes/Lecture1.html#you-probably-recognize-this-hardy-weinberg",
    "href": "notes/Lecture1.html#you-probably-recognize-this-hardy-weinberg",
    "title": "Lecture 1",
    "section": "You probably recognize this: Hardy-Weinberg",
    "text": "You probably recognize this: Hardy-Weinberg\n\nOriginally, HW was derived to show that dominance does not lead to a bias in transmission, even if the trait is expressed over the alternate in heterozygotes.\n\n\n\n\n\n\n\n\nTakeaways\n\n\nModels have unexpected insights/uses. Hardy never imagined his short letter to Nature would become taught across schools in the world as a “null model” in evolution."
  },
  {
    "objectID": "notes/Lecture1.html#null-models-in-evolution",
    "href": "notes/Lecture1.html#null-models-in-evolution",
    "title": "Lecture 1",
    "section": "Null Models in Evolution",
    "text": "Null Models in Evolution\nThroughout this semester, we’ll return to a few basic “null” models that will serve as useful measuring sticks.\n\nNull models are often “zero force” models - they ask what happens when the interesting processes are not in play (“An object in motion stays in motion”).\n\n\nOne that we’ll come back to time and again because of its simplicity is the Wright-Fisher model."
  },
  {
    "objectID": "notes/Lecture1.html#sewall-wright-ronald-a.-fisher",
    "href": "notes/Lecture1.html#sewall-wright-ronald-a.-fisher",
    "title": "Lecture 1",
    "section": "Sewall Wright, Ronald A. Fisher",
    "text": "Sewall Wright, Ronald A. Fisher\nWright and Fisher were two of the fathers of population genetics.\n\nThey hated each other, and disagreed in most beliefs of how evolution actually acted.\n\n\nThey did agree, however, that one could describe what happens to evolution when there are no forces applied to a population."
  },
  {
    "objectID": "notes/Lecture1.html#the-model",
    "href": "notes/Lecture1.html#the-model",
    "title": "Lecture 1",
    "section": "The model",
    "text": "The model\nPopulation of constant size, N. N is one of two parameters of the model. Good models get a lot done with a few parameters.\nAllele A starts at frequency \\(p_0\\). This is the only other parameter.\nDiploid adults, haploid gametes.\nHermaphroditic.\nLife cycle: gametes fuse to form adults, adults form gametes and die."
  },
  {
    "objectID": "notes/Lecture1.html#random-sampling---binomial-distribution",
    "href": "notes/Lecture1.html#random-sampling---binomial-distribution",
    "title": "Lecture 1",
    "section": "Random sampling - Binomial Distribution",
    "text": "Random sampling - Binomial Distribution\nThe probability that \\(k\\) gametes carrying the A allele are selected for the next generation can be calculated using Binomial probability distribution:\n\\[\nP(k|N,p) = \\binom{N}{k}p^k(1-p)^{N-k}\n\\]\nHere, \\(\\binom{N}{k}\\) counts the ways we could choose \\(k\\) gametes out of the \\(N\\) total."
  },
  {
    "objectID": "notes/Lecture1.html#wright-fisher-in-silico",
    "href": "notes/Lecture1.html#wright-fisher-in-silico",
    "title": "Lecture 1",
    "section": "Wright-Fisher In silico",
    "text": "Wright-Fisher In silico\nRather than start with math, let’s start with a simple simulation of the model:\n\nfunction WrightFisher(N,p,total_generations)\n    current_gen=1\n    freqs=zeros(total_generations) #This is what we'll keep track of\n    freqs[current_gen] = p\n    while current_gen&lt;total_generations\n        next = only(rand(Binomial(N,freqs[current_gen]),1))/N\n        freqs[current_gen+1] = next\n        current_gen += 1\n    end\n    return(freqs)\nend"
  },
  {
    "objectID": "notes/Lecture1.html#what-does-that-look-like-in-practice",
    "href": "notes/Lecture1.html#what-does-that-look-like-in-practice",
    "title": "Lecture 1",
    "section": "What does that look like in practice?",
    "text": "What does that look like in practice?"
  },
  {
    "objectID": "notes/Lecture1.html#what-does-it-look-like-across-many-trials",
    "href": "notes/Lecture1.html#what-does-it-look-like-across-many-trials",
    "title": "Lecture 1",
    "section": "What does it look like across many trials?",
    "text": "What does it look like across many trials?"
  },
  {
    "objectID": "notes/Lecture1.html#wright-fisher-analytically",
    "href": "notes/Lecture1.html#wright-fisher-analytically",
    "title": "Lecture 1",
    "section": "Wright-Fisher analytically",
    "text": "Wright-Fisher analytically\nLet’s re-examine the model purely from a mathematical approach. We might want to know what the expected allele frequency in the next generation is. The expected value of a random outcome is the sum of all possible outcomes weighted by their probabilities.\n\n\\[\nE[p_{t+1}] = \\sum_{i=1}^N\\left( \\frac{i}{N} P(i,N|p_{t}) \\right) = \\frac{1}{N} E[Binom(N,p_{t})]\n\\]\n\n\nWhere \\(Binom(N,p)\\) is the \\(Binomial\\) distribution, describing the chance of getting some number of successes given \\(N\\) trials with each having a chance of success of \\(p\\). If you know your distributions, you know that \\(E[Binomial(N,p)] = Np\\), so you get:\n\n\n\\[\nE[p_{t+1}] = \\frac{1}{N}Np_{t}=p_{t}\n\\]\n\n\nAnd, further, \\(E[p_t] = p_{t-1} = ... = p_0\\), meaning no change is expected."
  },
  {
    "objectID": "notes/Lecture1.html#analytical-vs-simulation",
    "href": "notes/Lecture1.html#analytical-vs-simulation",
    "title": "Lecture 1",
    "section": "Analytical vs Simulation",
    "text": "Analytical vs Simulation\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooks like no real change, just as expected."
  },
  {
    "objectID": "notes/Lecture1.html#variance-in-wright-fisher",
    "href": "notes/Lecture1.html#variance-in-wright-fisher",
    "title": "Lecture 1",
    "section": "Variance in Wright-Fisher",
    "text": "Variance in Wright-Fisher\nThe natural follow-up in probability is to describe the variance. In this case, the variance in the change from one generation to the next is\n\\[\nVar[p_{t+1}] = \\frac{p_t(1-p_t)}{2N}\n\\]\nBut we might want to know what the value is after many generations. That is a bit more complex, but for now understand that it is proportional to the above result:\n\\[\nVar[p_t] \\propto \\frac{t}{2N}\n\\]"
  },
  {
    "objectID": "notes/Lecture1.html#add-to-the-plot",
    "href": "notes/Lecture1.html#add-to-the-plot",
    "title": "Lecture 1",
    "section": "Add to the plot",
    "text": "Add to the plot\nAgain, we can add this to the plot:"
  },
  {
    "objectID": "notes/Lecture1.html#what-isare-the-important-factors",
    "href": "notes/Lecture1.html#what-isare-the-important-factors",
    "title": "Lecture 1",
    "section": "What is/are the important factors?",
    "text": "What is/are the important factors?\nOur simple Wright-Fisher simulations and analytical results depend on two quantities:\n\nThe starting allele frequency.\nThe population size.\n\n\nLet’s play around with each to develop a sense for what they do."
  },
  {
    "objectID": "notes/Lecture1.html#allele-frequency",
    "href": "notes/Lecture1.html#allele-frequency",
    "title": "Lecture 1",
    "section": "Allele frequency",
    "text": "Allele frequency\nRecall that expected allele frequency at time step t is just the initial frequency. But variance has a more complicated relationship:"
  },
  {
    "objectID": "notes/Lecture1.html#allele-frequency-in-practice",
    "href": "notes/Lecture1.html#allele-frequency-in-practice",
    "title": "Lecture 1",
    "section": "Allele frequency in practice",
    "text": "Allele frequency in practice\nIn practice, you find the largest allele frequency swings at intermediate frequencies."
  },
  {
    "objectID": "notes/Lecture1.html#effects-of-population-size",
    "href": "notes/Lecture1.html#effects-of-population-size",
    "title": "Lecture 1",
    "section": "Effects of population size",
    "text": "Effects of population size\nPopulation size does not affect the expected allele frequency change.\n\n\n\n\n\n\nTakeaway\n\n\nWhile we generally say that drift is strongly affected by population size, it plays no role in the direction of drift. In the long run, small and large populations show the same trends in terms of drift.\n\n\n\nPopulation size does affect the variance."
  },
  {
    "objectID": "notes/Lecture1.html#n-vs-variance",
    "href": "notes/Lecture1.html#n-vs-variance",
    "title": "Lecture 1",
    "section": "\\(N\\) vs Variance",
    "text": "\\(N\\) vs Variance"
  },
  {
    "objectID": "notes/Lecture1.html#no-change-in-mean",
    "href": "notes/Lecture1.html#no-change-in-mean",
    "title": "Lecture 1",
    "section": "No change in mean!",
    "text": "No change in mean!"
  },
  {
    "objectID": "notes/Lecture1.html#different-question-fate-of-an-allele",
    "href": "notes/Lecture1.html#different-question-fate-of-an-allele",
    "title": "Lecture 1",
    "section": "Different question: fate of an allele?",
    "text": "Different question: fate of an allele?\nLet’s use this framework to now ask a different question: what’s the probability an alternate allele is fixed?\nLet’s think of it formally - what is the probability that the A allele is fixed if it starts with frequency \\(p_t\\)?\n\nHere, we can use a favorite trick of population geneticists: we’ll work backwards.\n\n\nImagine we started with a population where each of the N individuals has a different allele.\n\n\nEventually, once enough time has passed, all of the individuals in the population will have descended from just one of these ancestors.1\n\nWe’ll prove this later when we talk about the coalescent, but for now take it as a fact given to you by god."
  },
  {
    "objectID": "notes/Lecture1.html#whos-the-ancestor",
    "href": "notes/Lecture1.html#whos-the-ancestor",
    "title": "Lecture 1",
    "section": "Who’s the ancestor?",
    "text": "Who’s the ancestor?\nIf all of the alleles are neutral any of them have an equal probability of being the ancestor.\n\nNow, what if there were two types of alleles in different proportions?\n\n\nShould be fairly intuitive to see that:\n\\[\nP(fix|p_0) = p_0\n\\]"
  },
  {
    "objectID": "notes/Lecture1.html#verifying-with-simulations",
    "href": "notes/Lecture1.html#verifying-with-simulations",
    "title": "Lecture 1",
    "section": "Verifying with simulations",
    "text": "Verifying with simulations\nHere we start with a frequency of 0.2."
  },
  {
    "objectID": "notes/Lecture1.html#and-if-we-start-with-a-more-common-allele",
    "href": "notes/Lecture1.html#and-if-we-start-with-a-more-common-allele",
    "title": "Lecture 1",
    "section": "And if we start with a more common allele…",
    "text": "And if we start with a more common allele…"
  },
  {
    "objectID": "notes/Lecture1.html#and-the-same-happens-with-smaller-populations",
    "href": "notes/Lecture1.html#and-the-same-happens-with-smaller-populations",
    "title": "Lecture 1",
    "section": "And the same happens with smaller populations",
    "text": "And the same happens with smaller populations"
  },
  {
    "objectID": "notes/Lecture1.html#but-what-about-real-data",
    "href": "notes/Lecture1.html#but-what-about-real-data",
    "title": "Lecture 1",
    "section": "But what about real data?",
    "text": "But what about real data?\nSurprisingly, tracking individual allele frequency changes is not super common.\n\nEither hard to get many generations (generation time ~year), or hard to catch every generation (multiple per day)\nOften not the core interest of any study, but can be incedental to other interests.\nReading for Thursday - Leu et al. 2020 “Sex alters molecular evolution in diploid experimental populations of S. cerevisiae”"
  },
  {
    "objectID": "notes/Lecture1.html#plot-of-data-from-leu-et-al.",
    "href": "notes/Lecture1.html#plot-of-data-from-leu-et-al.",
    "title": "Lecture 1",
    "section": "Plot of Data from Leu et al.",
    "text": "Plot of Data from Leu et al.\nHow general are the dynamics of this model? Here’s evolution in yeast:"
  },
  {
    "objectID": "notes/Lecture1.html#how-can-we-compare-with-wf-expectations",
    "href": "notes/Lecture1.html#how-can-we-compare-with-wf-expectations",
    "title": "Lecture 1",
    "section": "How can we compare with WF expectations?",
    "text": "How can we compare with WF expectations?\nDo allele frequency changes seem odd in any way?"
  },
  {
    "objectID": "notes/Lecture1.html#so-what-happens-to-a-new-allele",
    "href": "notes/Lecture1.html#so-what-happens-to-a-new-allele",
    "title": "Lecture 1",
    "section": "So, what happens to a new allele?",
    "text": "So, what happens to a new allele?\nHomework Assignment (submit via HuskyCT):\nWhat frequency will a mutation be found in when it first occurs?\nWhat is the probability of that mutation becoming fixed?\nGiven only what you have learned here: should smaller populations show slower or faster rates of fixing substitutions?"
  },
  {
    "objectID": "notes/Discussion1.html#quizlet-1-answers",
    "href": "notes/Discussion1.html#quizlet-1-answers",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Quizlet 1 Answers",
    "text": "Quizlet 1 Answers\n\nAlleles initially appear at a frequency of 1/N in haploid, 1/2N in diploid populations.\nFixation probability is \\(p_0\\), so 1/N (1/2N)\nEvolution seems to happen more rapidly in small populations - mutations are lost or fixed faster. BUT - this is ignoring any other evolutionary forces."
  },
  {
    "objectID": "notes/Discussion1.html#long-term-evolutionary-experiments-ltee",
    "href": "notes/Discussion1.html#long-term-evolutionary-experiments-ltee",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Long Term Evolutionary Experiments (LTEE)",
    "text": "Long Term Evolutionary Experiments (LTEE)\nBroadly popular type of study:\n\nPut a population in a new environment and track it\nPopular with yeast/bacteria, since ancestral populations can easily be preserved\nUseful to test how adaptation happens in the lab\nUseful to test how adaptation differs in slightly different circumstances"
  },
  {
    "objectID": "notes/Discussion1.html#leu-et-al-2020",
    "href": "notes/Discussion1.html#leu-et-al-2020",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Leu et al 2020",
    "text": "Leu et al 2020"
  },
  {
    "objectID": "notes/Discussion1.html#what-did-they-actually-do",
    "href": "notes/Discussion1.html#what-did-they-actually-do",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "What did they actually do?",
    "text": "What did they actually do?"
  },
  {
    "objectID": "notes/Discussion1.html#why-did-they-do-this",
    "href": "notes/Discussion1.html#why-did-they-do-this",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Why did they do this?",
    "text": "Why did they do this?\n\nLong-standing hypotheses about why sex even exists.\n\n\nOne with a lot of backing - adaptation is faster in sexual organisms (they avoid Clonal Interference)\nWe’ll talk more about Clonal interference in Week 3.\n\n\nLTEE experiments find mixed results - sometimes asexual evolve slower, other times equal.\n\n\nState of the art only in haploids!"
  },
  {
    "objectID": "notes/Discussion1.html#lets-discuss",
    "href": "notes/Discussion1.html#lets-discuss",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Let’s discuss",
    "text": "Let’s discuss\nIn small groups (4-5), try to figure out the following:\n1) What are some expected advantages of sexual reproduction? What are the disadvantages? Which ones are supported in this study?\n2) Why do the authors believe asexuals adapted as quickly/sexuals more slowly?\n3) Try to enumerate the actual differences between sexual and asexual treatments."
  },
  {
    "objectID": "notes/Discussion1.html#figure-2",
    "href": "notes/Discussion1.html#figure-2",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Figure 2",
    "text": "Figure 2"
  },
  {
    "objectID": "notes/Discussion1.html#figure-3",
    "href": "notes/Discussion1.html#figure-3",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Figure 3",
    "text": "Figure 3"
  },
  {
    "objectID": "notes/Discussion1.html#figure-4",
    "href": "notes/Discussion1.html#figure-4",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Figure 4",
    "text": "Figure 4"
  },
  {
    "objectID": "notes/Discussion1.html#takeaways",
    "href": "notes/Discussion1.html#takeaways",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Takeaways",
    "text": "Takeaways\nReally cool experiment!\n\nUnclear why asexual populations showed any fitness increase - not any of the individual mutations they identified."
  },
  {
    "objectID": "notes/Discussion1.html#lets-look-at-the-data",
    "href": "notes/Discussion1.html#lets-look-at-the-data",
    "title": "Discussion 1: LTEEs and Sex",
    "section": "Let’s look at the data!",
    "text": "Let’s look at the data!\nSupplementary Data File 1 (available online, or on the github for this class).\n\nIn lab, we’ll see how Wright-Fisher simulations can match up to this data (if they can)"
  },
  {
    "objectID": "labs/lab2.html",
    "href": "labs/lab2.html",
    "title": "Lab 2",
    "section": "",
    "text": "Today’s goal is two-fold:\n\nLearn to import and manipulate data tables either in R or Julia.\nUnderstand how genomic data files are structured, and play around with one.\n\nI will supply both Julia and R code in the blocks below - it’s up to you which you use. However, in either case I would recommend using some kind of IDE (integrated development environment). An IDE lets you interact with a programming language by seperating out your code writing from your code execution, and generally supplies lots of convenience functions. If you’ve already been using R, you are likely already using an IDE: RStudio (and if not, try it or positron which is meant to replace it long run). Pluto actually functions as a lightweight IDE for Julia, but if you would like more bells and whistles, I will recommend some branch of VSCode, like VSCodium. Setting it up should take you a few moments, but I am happy to help out.\nBefore we start coding, whichever language/IDE you have chosen, let’s think about how you’ll organize code. If you have done coding in the past, you are probably used to everything you write for a single project living in a single file. You are also therefore probably used to having to scroll gigantic files trying to find where some small piece of code is. More troublingly, if you have to redo something multiple times (say, loop through some function for different subsets of data), you probably have to remember to edit each instance of doing that method when you change it. I’ll try to encourage you to write code in a way that is more modular: functions/approaches you reuse can live in a separate file, so that you can quickly find them, and edit them more consistently.\nIn the case of my own projects, I organize them in a way that lets me reuse code, and edit it more consistently, by taking some pointers from the software development world. A typical project directory for me looks like:\nproject\n|    README.md\n|____data/\n|    |_____raw_data.tsv\n|    |_____genomic.vcf\n|____scripts/\n|____results/\n|____src/\n|    |____genomic_functions.jl\n|    |____stats_functions.jl\n|    |____plotting_functions.jl\n|     \n|____plots/\nUnprocessed data files can live in the data/ folder, letting you avoid editing them by accident and overwriting raw data. Scripts/pipelines to process the data go in scripts/, processed data that you don’t want to regenerate/results tables go in results/, and most importantly, any custom code goes into src/.\n\n\nTry working in the directory structure that you’ve been given with this repository. There is a folder including some Julia code I’ve written in src/ , and over time it will be populated with more of my own solutions, but you might as well add your own. To avoid git issues when you pull code in future weeks (and later help me when I’m grading code submissions), create a file in src/ called last_name.R or last_name.jl, depending on whether you are writing in R or Julia, respectively. Any functions you write - try to keep them in that file. Any scripts you work on for labs can live in the labs folder, just call them lab_{number of lab}_{last name}.R or .jl or .sh or whatever other format.\n\n\nSome of you are probably already used to using git. For others this might be an entirely new thing. I will not be enforcing, but I do strongly recommend you start getting acquainted with it - it will save you many headaches in the long run. Check out this guide for a place to start.\n\n\n\n\nIn different projects, you’ll often use different sets of software packages/libraries for your programming language. To make your workflow fully replicable, it’s a good idea to keep track of the package environment with some sort of environment management approach. Even if you are not worried about reporting your results eventually in a paper and having the correct package versions listed, consider a common work case: you run a script on your laptop and it runs fine. You then try to run it on data on the cluster, and it breaks: turns out a slightly different package version no longer behaves the way it does on your laptop - but you don’t know that! Looking for help, you then go to send your code to your PI, and they cannot get it running either. So, a result you thought you had gets tossed because you assume you made a mistake somewhere, just not sure where. This can all be avoided by using virtual environments - when you send your code to the cluster, it should include a manifest of each package required AND its version. Same for when you send it to your PI.\nYou don’t need to do this right now, but feel free to come back to this section after you’ve run through the lab and figure out what virtual environment works for you.\n\n\nrenv is the best approach to manage your packages in R. Getting it set up is relatively easy, and Rstudio comes with some utility tools for it. Follow the guide here.\nIn my personal experience, R ends up with frequent weird issues with packages, where some version of some library requires a new version of R, while a different package is not yet updated and therefore incompatible. For that (and other reasons we can talk about), I will recommend that you avoid looking for packages that do some task for you, and write your own code for it when possible, at least for this class.\n\n\n\nJulia has package environments built into its core, so there’s nothing too special you need to do. If you are working using a Pluto notebook, for instance, the package environment is handled entirely for you. But as you probably noticed in last weeks lab - the startup time includes a whole lot of precompiling packages in the background. The way to make Julia quite a bit faster is to explicitly have a project file in your project directory. You do this as follows:\n\nusing Pkg; Pkg.activate(\"/absolute/path/to/your/project/\"); Pkg.instantiate()\n\nWhat the above line will do is tell Julia to create two files in the project directory: Manifest.toml and Project.toml. These files just keep track of the versions of all of the packages that have been added to the project, so that when you start up the project, it knows there should be stored binaries for all of those packages (compatible with each other). As you add new packages, it’ll handle downgrading/upgrading/finding a solution that works for all of the packages you want.\n\n\n\nPython has a few solutions, but probably the best is making a conda environment. It builds on top of python’s own system pip and pyenv, but has great integration with the huge ecosystem of packages that exist in the Python world. See a guide here."
  },
  {
    "objectID": "labs/lab2.html#for-this-class",
    "href": "labs/lab2.html#for-this-class",
    "title": "Lab 2",
    "section": "",
    "text": "Try working in the directory structure that you’ve been given with this repository. There is a folder including some Julia code I’ve written in src/ , and over time it will be populated with more of my own solutions, but you might as well add your own. To avoid git issues when you pull code in future weeks (and later help me when I’m grading code submissions), create a file in src/ called last_name.R or last_name.jl, depending on whether you are writing in R or Julia, respectively. Any functions you write - try to keep them in that file. Any scripts you work on for labs can live in the labs folder, just call them lab_{number of lab}_{last name}.R or .jl or .sh or whatever other format.\n\n\nSome of you are probably already used to using git. For others this might be an entirely new thing. I will not be enforcing, but I do strongly recommend you start getting acquainted with it - it will save you many headaches in the long run. Check out this guide for a place to start."
  },
  {
    "objectID": "labs/lab2.html#virtual-environments-and-package-management",
    "href": "labs/lab2.html#virtual-environments-and-package-management",
    "title": "Lab 2",
    "section": "",
    "text": "In different projects, you’ll often use different sets of software packages/libraries for your programming language. To make your workflow fully replicable, it’s a good idea to keep track of the package environment with some sort of environment management approach. Even if you are not worried about reporting your results eventually in a paper and having the correct package versions listed, consider a common work case: you run a script on your laptop and it runs fine. You then try to run it on data on the cluster, and it breaks: turns out a slightly different package version no longer behaves the way it does on your laptop - but you don’t know that! Looking for help, you then go to send your code to your PI, and they cannot get it running either. So, a result you thought you had gets tossed because you assume you made a mistake somewhere, just not sure where. This can all be avoided by using virtual environments - when you send your code to the cluster, it should include a manifest of each package required AND its version. Same for when you send it to your PI.\nYou don’t need to do this right now, but feel free to come back to this section after you’ve run through the lab and figure out what virtual environment works for you.\n\n\nrenv is the best approach to manage your packages in R. Getting it set up is relatively easy, and Rstudio comes with some utility tools for it. Follow the guide here.\nIn my personal experience, R ends up with frequent weird issues with packages, where some version of some library requires a new version of R, while a different package is not yet updated and therefore incompatible. For that (and other reasons we can talk about), I will recommend that you avoid looking for packages that do some task for you, and write your own code for it when possible, at least for this class.\n\n\n\nJulia has package environments built into its core, so there’s nothing too special you need to do. If you are working using a Pluto notebook, for instance, the package environment is handled entirely for you. But as you probably noticed in last weeks lab - the startup time includes a whole lot of precompiling packages in the background. The way to make Julia quite a bit faster is to explicitly have a project file in your project directory. You do this as follows:\n\nusing Pkg; Pkg.activate(\"/absolute/path/to/your/project/\"); Pkg.instantiate()\n\nWhat the above line will do is tell Julia to create two files in the project directory: Manifest.toml and Project.toml. These files just keep track of the versions of all of the packages that have been added to the project, so that when you start up the project, it knows there should be stored binaries for all of those packages (compatible with each other). As you add new packages, it’ll handle downgrading/upgrading/finding a solution that works for all of the packages you want.\n\n\n\nPython has a few solutions, but probably the best is making a conda environment. It builds on top of python’s own system pip and pyenv, but has great integration with the huge ecosystem of packages that exist in the Python world. See a guide here."
  },
  {
    "objectID": "labs/lab2.html#data-formats-90-of-the-battle",
    "href": "labs/lab2.html#data-formats-90-of-the-battle",
    "title": "Lab 2",
    "section": "Data formats: 90% of the battle",
    "text": "Data formats: 90% of the battle\nYou will find that in practice most bioinformatics is wrangling data formats. Every piece of software/software package has its own preferred format for data. This is part of the reason I stress the importance of understanding (and being able to write your own) code for performing various population genetic approaches. If you know how to calculate \\(\\pi\\), you will hopefully just figure out how to do that for the format you have the data in, rather than having to spend hours/days chasing format conversion down. In this and future weeks, I will give you a general run down of what you need to do with the data, and then give you some code/pointers as for how, but I’ll leave the actual implementation to you."
  },
  {
    "objectID": "labs/lab2.html#looking-at-the-data-before-importing-it",
    "href": "labs/lab2.html#looking-at-the-data-before-importing-it",
    "title": "Lab 2",
    "section": "Looking at the data before importing it",
    "text": "Looking at the data before importing it\nIt’s useful to take a glance at the data before you try to import it. You can try to open the file using your operating system’s choice of software, but Unix tools are built well to precisely do a quick glance. In the labs/data folder, there is a file called buffalo.txt. This is the data from (Buffalo 2021). Before you import it, it’s good to take a look at what the data actually looks like. We can do so in the terminal. Navigate to the right directory (if you are on Windows and using wsl, I can help you here). Once there, run the following\nhead buffalo.txt\nYou should see something like:\nspecies phylum  habitat mating_system   range_cat       sexual_system   abbrv   neut_model_conf genome_species self_est maplen_data_source      diversity_data_source   site_type       hcn     num_markers     parpath pred_piimpact_of_sel    log10_size      log10_range     num_chr totalMb_covered ave_rec assembly_size   selfing map_length      genome_size     fecundity       propagule       bodymass_g      diversity       size    log10_diversitysocial   species_orig    is_terrestrial  n_occ   range   id      kingdom superphylum     subphylum       class  order    family  genus   clean_name      redlist_cat     log10_body_mass log10_body_mass_pred    log10_popsize  log10_density    log10_density_pred      pred_log10_body_mass    pred_log10_density      pred_log10_N    RS     log10_RS log10_map_length        species_lower\nAbatus agassizi Echinodermata   NA      NA      NA      NA      NA      NA      NA      NA      NA      Romiguier et al.        NA      NA      NA      FALSE   NA      NA      -1.6108339156354674     6.633700542517746      NA       NA      NA      NA      NA      NA      NA      0.299   0.002   9.28    0.00727197      0.0245  -2.1383479214336867     FALSE   Abatus agassizi FALSE   72      4302298.533787006       NA      Animalia        NA     NA       Echinoidea      Spatangoida     Schizasteridae  Abatus  Abatus agassizi NA      -0.6534814211608199    -0.6405066270384477      11.065298198284022      4.431597655766276       4.42625265103009        -0.6547028847549656     4.432901908737623       11.066602451255369      175604021.7872247       8.244534458153213       NA     abatus agassizi\nAcromyrmex echinatior   Arthropoda      NA      NA      NA      male.haploid    NA      NA      NA      NA     Stapley et al.   NA      NA      19      145     FALSE   NA      NA      -2.2596373105057563     5.61732386966055NA      NA      NA      NA      NA      20.338  0.335   NA      NA      NA      NA      0.0055  NA      TRUE   Acromyrmex echinatior    TRUE    105     414308.5250288181       574019  Animalia        Ecdysozoa       HexapodaInsecta Hymenoptera     Formicidae      Acromyrmex      Acromyrmex echinatior   NA      -2.7280036542040085    -2.7364907216649312      11.617818883879833      6.000495014219284       6.009905730795794       -2.7309804876823183     6.003335452336658       11.620659321997207      75328822.73251238       7.8769611801663055      1.3083082429982256      acromyrmex echinatior\nAcropora millepora      Cnidaria        NA      NA      NA      hermaphrodite   NA      NA      NA      NA     Stapley et al.   NA      NA      14      429     FALSE   NA      NA      NA      7.795297039711985       NA     NA       NA      NA      NA      13.91   0.42    NA      NA      NA      NA      NA      NA      FALSE   Acropora millepora      FALSE   1613    62416159.05944288       52901   Animalia        NA      Anthozoa        AnthozoaScleractinia    Acroporidae     Acropora        Acropora millepora      NT      NA      NA      NA      NA     NA       NA      NA      NA      NA      NA      1.1433271299920464      acropora millepora\nAcyrthosiphon pisum     Arthropoda      Terrestrial     Partial selfing Cosmopolitan    parthenogenic   NA     NA       NA      NA      Stapley et al.  Leffler et al.  NA      5       173     FALSE   NA      NA      -2.3979400086720375     7.080809415567688       NA      NA      NA      NA      NA      3.94    0.165   NA      NA     NA       0.0088125       0.004   -2.054900870000545      FALSE   Acyrthosiphon pisum     TRUE    2512    12045072.421827307      200572  Animalia        Ecdysozoa       Hexapoda        Insecta Hemiptera       Aphididae      Acyrthosiphon    Acyrthosiphon pisum     NA      -3.1702208566789927     -3.182279811406018      13.415739698676683      6.334930283108995       6.357104023822486       -3.173571874992307      6.338098183370152       13.41890759893784       3011268105.4568267      9.478749424239727       0.5954962218255742      acyrthosiphon pisum\nAedes aegypti   Arthropoda      Terrestrial     Obligatory outcrossing  Cosmopolitan    gonochorous     NA     NA       NA      NA      Stapley et al.  Leffler et al.  NA      3       2006    FALSE   NA      NA      -2.579631620142476      7.583115518888759       NA      NA      NA      NA      NA      2.35    0.94214 NA      NA     NA       0.01421 0.0026325       -1.8474059220725303     FALSE   Aedes aegypti   TRUE    30000   38292658.52071776       126240  Animalia        Ecdysozoa       Hexapoda        Insecta Diptera Culicidae       Aedes   Aedes aegypti   NA      -3.7511723290864785     -3.753271310092434      14.35740153216626       6.774286013277501      6.770873848375246        -3.7550149230997683     6.777884108505123       14.360999627393882      14546119096.189085      10.162747139031236      0.37106786227173627     aedes aegypti\nAedes albopictus        Arthropoda      NA      NA      NA      gonochorous     NA      NA      NA      NA     Stapley et al.   NA      NA      3       172     FALSE   NA      NA      -2.580044251510242      7.445784591347202       NA      NA      NA      NA      NA      2.126   1.09047 NA      NA      NA      NA      0.00263 NA     FALSE    Aedes albopictus        TRUE    30000   27911590.92003886       126244  Animalia        Ecdysozoa      Hexapoda Insecta Diptera Culicidae       Aedes   Aedes albopictus        NA      -3.7524917009535947     -3.753551590575262      14.221068404987681      6.775283813640479       6.779607141395379       -3.756335411361592     6.778882885863879        14.224667477211081      10612772212.942533      10.025828842857445      0.32756326018727794     aedes albopictus\nAgelaius phoeniceus     Chordata        Terrestrial     Obligatory outcrossing  Broad endemic   NA      NA     NA       NA      NA      NA      Leffler et al.  NA      NA      NA      FALSE   NA      NA      -0.6575773191777937     7.119596489010348       NA      NA      NA      NA      NA      NA      NA      NA      NA      NA     0.0059   0.22    -2.2291479883578558     FALSE   Agelaius phoeniceus     TRUE    30000   13170324.908019817     179045   Animalia        NA      Vertebrata      Aves    Passeriformes   Icteridae       Agelaius        Agelaius phoeniceus     LC      2.394517431468307       2.39143600201306        9.246086360300021       2.126489871289673       2.117521308655038       2.3958750510517968      2.125537079006005       9.245133568016353       59865113.218271896      7.7771738081881425      NA      agelaius phoeniceus\nAiluropoda melanoleuca  Chordata        Terrestrial     Obligatory outcrossing  Narrow endemic  NA      NA     NA       NA      NA      NA      Leffler et al.  NA      NA      NA      FALSE   NA      NA      0.18730634078622424     6.150386149916167       NA      NA      NA      NA      NA      NA      NA      NA      NA      NA     0.00135  1.53924 -2.869666231504994      FALSE   Ailuropoda melanoleuca  TRUE    130     1413794.051074382      621845   Animalia        NA      Vertebrata      Mammalia        Carnivora       Ursidae Ailuropoda      Ailuropoda melanoleuca  VU      5.095998266476374       5.1000064327850865      6.2338291555483885      0.08344300563222148     0.08933867763248815     5.099641760862692       0.08048976492485682     6.2308759148410235      918501.3715043671       5.963079809129942       NA      ailuropoda melanoleuca\nAllolobophora chlorotica        Annelida        NA      NA      NA      NA      NA      NA      NA      NA     NA       Romiguier et al.        NA      NA      NA      FALSE   NA      NA      -1.2596373105057561     6.580581413049396       NA      NA      NA      NA      NA      NA      NA      0.74    2.38e-4 0.3     0.0449719      0.055    -1.3470587637088103     FALSE   Allolobophora chlorotica        TRUE    3070    3806987.16874359       974862   Animalia        Lophozoa        NA      Clitellata      Opisthopora     Lumbricidae     Allolobophora  Allolobophora chlorotica NA      0.46945531325089346     0.4661403969117158      10.162936554916952      3.582355141867555       3.582435448831861       0.4691840295555272      3.5828278594116822      10.163409272461077     69217948.52261072        7.840218723555152       NA      allolobophora chlorotica\nadagilis@4ZMQ374:/mnt/c/Projects/PopGen25/labs/data$ head -2 buffalo_2021.txt \nspecies phylum  habitat mating_system   range_cat       sexual_system   abbrv   neut_model_conf genome_species self_est maplen_data_source      diversity_data_source   site_type       hcn     num_markers     parpath pred_piimpact_of_sel    log10_size      log10_range     num_chr totalMb_covered ave_rec assembly_size   selfing map_length      genome_size     fecundity       propagule       bodymass_g      diversity       size    log10_diversitysocial   species_orig    is_terrestrial  n_occ   range   id      kingdom superphylum     subphylum       class  order    family  genus   clean_name      redlist_cat     log10_body_mass log10_body_mass_pred    log10_popsize  log10_density    log10_density_pred      pred_log10_body_mass    pred_log10_density      pred_log10_N    RS     log10_RS log10_map_length        species_lower\nAbatus agassizi Echinodermata   NA      NA      NA      NA      NA      NA      NA      NA      NA      Romiguier et al.        NA      NA      NA      FALSE   NA      NA      -1.6108339156354674     6.633700542517746      NA       NA      NA      NA      NA      NA      NA      0.299   0.002   9.28    0.00727197      0.0245  -2.1383479214336867     FALSE   Abatus agassizi FALSE   72      4302298.533787006       NA      Animalia        NA     NA       Echinoidea      Spatangoida     Schizasteridae  Abatus  Abatus agassizi NA      -0.6534814211608199    -0.6405066270384477      11.065298198284022      4.431597655766276       4.42625265103009        -0.6547028847549656     4.432901908737623       11.066602451255369      175604021.7872247       8.244534458153213       NA     abatus agassizi\nThis looks like a tab seperated file (usually ending in .tsv). Tabs are special characters (often denoted as \\t) are one of the two most common ways to delimit fields in the data. Many data files adopt a general structure typical to .tsv files:\n1) The first line is a header - indicating the names of the columns of data.\n2) The data is often organized as a wide data format: each row represents a single data point, including all of its metadata. Long data formats will separate out the metadata. This can be sometimes useful when the data is sparse (lots of missing values) as it is in this dataset, but it is harder to parse for humans at a glance.\nThere are various packages/approaches to reading in data in most programming languages. The ones I’ll recommend for R and Julia focus on making the user’s life as simple as possible while catching most exceptions."
  },
  {
    "objectID": "labs/lab2.html#r",
    "href": "labs/lab2.html#r",
    "title": "Lab 2",
    "section": "R",
    "text": "R\nIf you are working in R, open up your IDE and create a new file that you’ll store the commands you wrote here in. If you are using RStudio, consider creating a new R Markdown document. This is similar to the format this webpage is written in, with a mixture of text and executable code. Having good comments around what you’ve done is very helpful in the long run, so some form of Markdown can be great. Your screen should look something like this:\n\n\n\n\n\nYou’ll run code in the bottom left, and keep versions that ran/worked how you wanted in the top right.\nR has a variety of libraries to read in data. readr is the one I will recommend, because it does a good job of automatically detecting various idiosyncracies in the data. To read the datafile in with readr, you’ll need to run the following:\n\nrequire(readr)\n\nbuffalo_data &lt;- read_tsv(\"&lt;path to your repository&gt;/labs/data/buffalo_2021.txt\",sep=\"\\t\")\n\nThis will read the data in as a tibble object that is easy to work with in R. If you get an error stating the package does not exist, you ned to first install it. This can be done by running install.packages(\"readr\"). You’ll then need to rerun the above block of code."
  },
  {
    "objectID": "labs/lab2.html#julia",
    "href": "labs/lab2.html#julia",
    "title": "Lab 2",
    "section": "Julia",
    "text": "Julia\nSo, you’ve chosen Julia! If you are using Pluto as your coding environment, starting out will be as simple as creating a new Pluto notebook, and you can begin coding. If you are using VSCodium (or one of its branches), there’ll be a bit more setup in getting some Julia extensions installed, and figuring out the oh-so-many options that Virtual Studio tosses at you. But once you do, open the folder for this repository, and create a new .jl file somewhere and you can start coding. I recommend opening this repository only because you’ll then be able to piggyback off of the package environment for the course (which already has a bunch of packages you’ll probably want/need).\nThe way to activate that environment (assuming you run julia from the repository folder) is to open Julia and then hit the ] key. This will enter you into Pkg mode (the line should start with Pkg&gt;. Then type:\n\nactivate \"PopGen25\"\ninstantiate\n\nAnd all of the necessary packages should be installed and precompiled. Hit the backspace key to exit Pkg mode (the terminal should start with julia&gt; ).\nJulia’s CSV package does a good job reading in many data formats, but it also wants to know what kind of object you will turn the data into (a matrix, a vector, a dataframe?). We’ll go for a DataFrame object:\n\nusing CSV, DataFrames\n\nbuffalo_data = CSV.read(\"&lt;path to your repository&gt;/labs/data/buffalo_2021.txt\",DataFrame,delim=\"\\t\",missingstring=NA)\n\nUnlike R, if the package is not installed Julia will just ask if you would like to install it, and if you say yes, it will automatically load it after installation. Now that you have the data open, let’s take a look at it!"
  },
  {
    "objectID": "labs/lab2.html#re-creating-the-main-plot-in-buffalo-2021",
    "href": "labs/lab2.html#re-creating-the-main-plot-in-buffalo-2021",
    "title": "Lab 2",
    "section": "Re-creating the main plot in Buffalo 2021",
    "text": "Re-creating the main plot in Buffalo 2021\nData exploration is often visual - it’s a good idea to see what the distribution of data looks like before you decide what statistical model to use on it. We’ll start with a relatively simple plot: a scatter plot of the population size vs genetic diversity. To do this you’ll need to figure out some basics of how to refer to different data columns in your language of choice. Code to plot this will be your first reportable bit for the lab. If you are already comfortable plotting data - great! Focus on the rest of the lab and skip ahead to"
  },
  {
    "objectID": "labs/lab2.html#plotting-in-r",
    "href": "labs/lab2.html#plotting-in-r",
    "title": "Lab 2",
    "section": "Plotting in R",
    "text": "Plotting in R\nStart by checking the opened data. Just like bash, R also has a head command. If you run\n\nhead(buffalo_data)\n\nYou should see:\n# A tibble: 6 × 60\n  species             phylum habitat mating_system range_cat sexual_system abbrv\n  &lt;chr&gt;               &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;\n1 Abatus agassizi     Echin… NA      NA            NA        NA            NA   \n2 Acromyrmex echinat… Arthr… NA      NA            NA        male.haploid  NA   \n3 Acropora millepora  Cnida… NA      NA            NA        hermaphrodite NA   \n4 Acyrthosiphon pisum Arthr… Terres… Partial self… Cosmopol… parthenogenic NA   \n5 Aedes aegypti       Arthr… Terres… Obligatory o… Cosmopol… gonochorous   NA   \n6 Aedes albopictus    Arthr… NA      NA            NA        gonochorous   NA   \nNote a couple of things: the data contains 60 columns, the names of the first 8 of which are listed above. Under each name of column the data type is specified (in this case, all chr - character data, e.g. text strings). Not visible in this text, but hopefully in yours - the NA entries should be a different color, highlighting where data is missing.\nYou might want to know all of the different columns available: you can get that list by asking for the names of the data\n\nnames(buffalo_data)\n\nAnd you should see:\n [1] \"species\"               \"phylum\"                \"habitat\"              \n [4] \"mating_system\"         \"range_cat\"             \"sexual_system\"        \n [7] \"abbrv\"                 \"neut_model_conf\"       \"genome_species\"       \n[10] \"self_est\"              \"maplen_data_source\"    \"diversity_data_source\"\n[13] \"site_type\"             \"hcn\"                   \"num_markers\"          \n[16] \"parpath\"               \"pred_pi\"               \"impact_of_sel\"        \n[19] \"log10_size\"            \"log10_range\"           \"num_chr\"              \n[22] \"totalMb_covered\"       \"ave_rec\"               \"assembly_size\"        \n[25] \"selfing\"               \"map_length\"            \"genome_size\"          \n[28] \"fecundity\"             \"propagule\"             \"bodymass_g\"           \n[31] \"diversity\"             \"size\"                  \"log10_diversity\"      \n[34] \"social\"                \"species_orig\"          \"is_terrestrial\"       \n[37] \"n_occ\"                 \"range\"                 \"id\"                   \n[40] \"kingdom\"               \"superphylum\"           \"subphylum\"            \n[43] \"class\"                 \"order\"                 \"family\"               \n[46] \"genus\"                 \"clean_name\"            \"redlist_cat\"          \n[49] \"log10_body_mass\"       \"log10_body_mass_pred\"  \"log10_popsize\"        \n[52] \"log10_density\"         \"log10_density_pred\"    \"pred_log10_body_mass\" \n[55] \"pred_log10_density\"    \"pred_log10_N\"          \"RS\"                   \n[58] \"log10_RS\"              \"log10_map_length\"      \"species_lower\" \nFor your plot, you’ll want to plot pred_log10_N against log10_diversity. Calling a column from a table is done as: &lt;your data frame&gt;$&lt;your column_name&gt;. So, to look at just the predicted log 10 population size, you might call buffalo_data$pred_log10_N.\n\n\n\n\n\n\nHint\n\n\n\nHitting the Tab key will automatically try to fill out the rest of a variable/function name in R, and will even give you an overview of arguments one could call. Don’t be shy about mashing the Tab key as you code, just to avoid any coding issues.\n\n\nHow you plot is an exercise left to the reader. You can do a very basic plot with Rs innate plot functions, but I would recommend taking the time to look at something like ggplot2 (follow this guide, but just substitute your data in.)"
  },
  {
    "objectID": "labs/lab2.html#plotting-in-julia",
    "href": "labs/lab2.html#plotting-in-julia",
    "title": "Lab 2",
    "section": "Plotting in Julia",
    "text": "Plotting in Julia\nBefore we plot, let’s see how the code differs compared to R. Just like R, we can take a look at the head of the data, but that’s done by default when you import the data. So you should have already seen something like:\n300×60 DataFrame\n Row │ species                      phylum         habitat      mating_system           range_cat       sexual_system  abbrv     neut_model_conf  genome_species  self_est  maplen_data_source  diversity_data_source  site_type  hc ⋯\n     │ String                       String15       String31?    String31?               String15?       String31?      String7?  String3?         String31?       Float64?  String31?           String31?              Missing    In ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Abatus agassizi              Echinodermata  missing      missing                 missing         missing        missing   missing          missing          missing  missing             Romiguier et al.         missing  mi ⋯\n   2 │ Acromyrmex echinatior        Arthropoda     missing      missing                 missing         male.haploid   missing   missing          missing          missing  Stapley et al.      missing                  missing \n   3 │ Acropora millepora           Cnidaria       missing      missing                 missing         hermaphrodite  missing   missing          missing          missing  Stapley et al.      missing                  missing \n   4 │ Acyrthosiphon pisum          Arthropoda     Terrestrial  Partial selfing         Cosmopolitan    parthenogenic  missing   missing          missing          missing  Stapley et al.      Leffler et al.           missing \n   5 │ Aedes aegypti                Arthropoda     Terrestrial  Obligatory outcrossing  Cosmopolitan    gonochorous    missing   missing          missing          missing  Stapley et al.      Leffler et al.           missing     ⋯\n   6 │ Aedes albopictus             Arthropoda     missing      missing                 missing         gonochorous    missing   missing          missing          missing  Stapley et al.      missing                  missing \n   7 │ Agelaius phoeniceus          Chordata       Terrestrial  Obligatory outcrossing  Broad endemic   missing        missing   missing          missing          missing  missing             Leffler et al.           missing  mi\n   8 │ Ailuropoda melanoleuca       Chordata       Terrestrial  Obligatory outcrossing  Narrow endemic  missing        missing   missing          missing          missing  missing             Leffler et al.           missing  mi\n  ⋮  │              ⋮                     ⋮             ⋮                 ⋮                   ⋮               ⋮           ⋮             ⋮               ⋮            ⋮              ⋮                     ⋮                ⋮         ⋱\n 294 │ Tupaia belangeri             Chordata       Terrestrial  Obligatory outcrossing  Broad endemic   missing        missing   missing          missing          missing  missing             Leffler et al.           missing  mi ⋯\n 295 │ Varecia variegata            Chordata       missing      missing                 missing         missing        missing   missing          missing          missing  missing             Romiguier et al.         missing  mi\n 296 │ Varecia variegata variegata  Chordata       Terrestrial  Obligatory outcrossing  Island          missing        missing   missing          missing          missing  missing             Leffler et al.           missing  mi\n 297 │ Vespula vulgaris             Arthropoda     missing      missing                 missing         male.haploid   missing   missing          missing          missing  Stapley et al.      missing                  missing \n 298 │ Xenopus tropicalis           Chordata       missing      missing                 missing         gonochorous    missing   missing          missing          missing  Stapley et al.      missing                  missing     ⋯\n 299 │ Xiphophorus maculatus        Chordata       missing      missing                 missing         gonochorous    missing   missing          missing          missing  Stapley et al.      missing                  missing \n 300 │ Zonotrichia albicollis       Chordata       Terrestrial  Obligatory outcrossing  Broad endemic   missing        missing   missing          missing          missing  missing             Leffler et al.           missing  mi\n                                                                                                                                                                                                       47 columns and 285 rows omitte\nA couple worthwile notes - Julia recoded the NAs as missing, which is a special type in Julia, and will give you headaches sometimes. Second, to save on memory, it has used the minimal size of String as the type for each column. For instance, no Phylum is longer than 15 characters, so it uses the String15 type, which has no more than 15 characters. These tiny optimizations add up to one of the reasons Julia performs much faster than R for big projects.\nJulia has a bunch of approaches to plotting, probably more than either R or python, as there’s lots of different subfields with their own plotting approaches. My goal is for you to write scripts you like using, so I’ll recommend taking a look at the plotting backends most are listed here except for the Makie ecosystem, which you can take a glance at [here] . Overall - Plots.jl is a fine starting point, but Makie is popular because it allows some more fine-tuned customization for the plots. If you are working on a cluster, absolutely check out UnicodePlots.jl, as it can spit out nice summary plots without you having to download them/run interactive sessions.\nThe syntax to get a particular column in Julia is &lt;data_frame&gt;.&lt;column_name&gt;, so to get the population size you’d write buffalo_data.pred_log10_N. Now, follow the guide for your chosen plotting package and plot N versus diversity."
  },
  {
    "objectID": "labs/lab2.html#how-is-a-vcf-file-structured",
    "href": "labs/lab2.html#how-is-a-vcf-file-structured",
    "title": "Lab 2",
    "section": "How is a VCF file structured",
    "text": "How is a VCF file structured\n\nHeader(s)\nVCF files start with a whole bunch of lines starting with ##. Some of these lines are mandatory, such as the first one which says which version of the VCF format is being used. Others are useful for good science, like keeping track of the commands that were used to generate this particular VCF. Additionally, there are many lines which determine what kind of details about the genotype calss are contained in the file. For today, we won’t worry about almost all of them, as the file I’ll have you play with is as basic as possible.\nThe final line before the data actually starts only has a single #, and is the real header. This has the names of each data column, including eight fixed fields:\n#CHROM   POS   ID    REF    ALT    QUAL    FILTER    INFO    FORMAT\nThese are: the chromosome the variant is on, its position, a unique ID, what allele is present in the reference, what alterante allele(s) are found in the data, the quality of the call as a [PHRED]() score, whether the site is filtered out or not, and an INFO column that can contain a lot of information about how the allele, and a FORMAT tab that tells you how the genotypes are listed. Generally, this will start with GT, and can then have various bits after a :, like GT:GQ means that you will first see the genotype, and then the genotype quality. The rest of the header is a list of your individual samples:\n#CHROM   POS   ID    REF    ALT    QUAL    FILTER    INFO   \nFORMAT    Ind1     Ind2     Ind3   .... IndN"
  },
  {
    "objectID": "labs/lab2.html#genotype-information",
    "href": "labs/lab2.html#genotype-information",
    "title": "Lab 2",
    "section": "Genotype information",
    "text": "Genotype information\nAfter this, the file is a list of sites, each of which starts with the 8 fixed columns of info, and then presents the genotype for each individual. They look something like:\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  HG00096 HG00092\n10   60523  rs148087467    T     G       100     PASS    -      GT:GL    0|0:-0.19  0/1:-0.12\nWhat does this say? Well, individuals HG00096 and HG00092 have two different genotypes: 0|0 and 0/1 . A pipe character | means that the data is phased (we’ll talk about this next week), while the 0/1 says that the data is unphased. 0s indicate the reference allele (T, in this case), while 1 indicates the first ALT allele (G, in this case). You could also see something like:\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  HG00096 HG00092\n8   11200  -    T     G,C,A       100     PASS    -      GT    1|2    0/3\nThis tells you the individuals have genotypes: GC and TA, respectively."
  },
  {
    "objectID": "labs/lab2.html#reading-in-vcf-data",
    "href": "labs/lab2.html#reading-in-vcf-data",
    "title": "Lab 2",
    "section": "Reading in VCF data",
    "text": "Reading in VCF data\nThere are many genomics packages in R, and so there are many ways to read in a VCF. Today, I’ll have you try the vcfR package: [link](https://cran.r-project.org/web/packages/vcfR/index.html), which is fairly minimal. Once you have the package installed and loaded, find the .vcf file in the `labs/data` folder of the repository, and read it in. Because in practice you’ll often work with the genotype matrix, I’ve gone ahead and added a line that converts the vcf to a genotype matrix:\n\nrequire(vcfR)\nvcf = read.vcfR(\"&lt;path to file&gt;\")\nGT = extract.gt(vcf,element=\"GT\",as.numeric=TRUE)\n\nThe file I’ve constructed is extremely minimal, in that it only contains genotype data. The goal today is to write a function that can calculate the per-site heterozygosity of the data. I have a scaffold of a function set up below, but I want you to play around with the data and find what works for you to actually extract the information.\n\nh_vcf = function(gt_matrix){\n    h_s = apply(gt_matrix,1,h_sample) # Apply takes a matrix (gt_matrix here), an argument specifying whether it should run across each row (1) or column(2) or entry(1:2), and a function to apply to that row/column. \n    return(sum(h_s)/dim(gt_matrix)[1]) #h_s will be heterozygosities at each site, so we take their average.\n}\n\nh_sample = function(site){\n    #The above function makes sure you get passed an array of values, where 0 is aa, 1 is Aa and 2 is AA. How do we go from that to sample heterozygosity? \n    #Take a look at the lecture notes. Remember that you need to account for how many sites are actually sampled.\n    allele_frequency = ???\n    n = ???\n    h = ???\n    return(h)\n}"
  },
  {
    "objectID": "labs/lab2.html#julia-solution",
    "href": "labs/lab2.html#julia-solution",
    "title": "Lab 2",
    "section": "Julia solution",
    "text": "Julia solution\nYou’ve already been given some code to calculate h_sample given a vector in class, so I’ll instead ask you to calculate the Site Frequency Spectrum. Of course, feel free to work out by yourself how you would calculate h (the two are very closely linked). In Julia, the best package to deal with vcf files is VCFTools. Unlike vcfR, it will not try to read in and keep the whole vcf in memory. Rather, it has many utility functions to quickly allow you to read in only the data you are interested in. So, to get out the genotype matrix, you would run:\n\nusing VCFTools\n\ngt_matrix = convert_gt(Int8,\"&lt;path to vcf&gt;\";model=:additive,impute=false,scale=false,center=false)\n\nNotice that because Julia is often column centric, each individual is a row, and each column is now a variant, unlike the VCF. Now, to calculate the SFS, you’ll want to map a function that calculates frequency across the data.\n\nfunction frequency(site)\n    freq = missing #Think about how you'd get allele frequencies from a genotype matrix. How do you account for missing data?\n    return(freq)\nend\n\nsitefreqs = [frequency(i) for i in eachcol(gt_matrix)]"
  },
  {
    "objectID": "labs/lab2.html#bonus-plot-your-heterozygosities",
    "href": "labs/lab2.html#bonus-plot-your-heterozygosities",
    "title": "Lab 2",
    "section": "Bonus: Plot your heterozygosities",
    "text": "Bonus: Plot your heterozygosities\nNow that you have hopefully learned both how to plot data, and how to calculate heterozygosity (or the SFS), try to plot your data. As you do so, keep track of what bits of code you keep re-running/re-using. Could you have written your code in a way that made those bits modular? (e.g.: functions that are called, so that you only need to maintain one copy of the function)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is build using Quarto markdown. The benefit for you is that all of the code for lectures/labs is available on its associated github repository."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Population Genetics 2025",
    "section": "",
    "text": "Welome to PopGen!\nThis is the website for Population Genetics (EEB 5348) at UConn. Here you will find notes on each of the lectures, links to papers and other materials as they become needed.\n\n\nAbout the course\nThe focus of this course is to introduce graduate students to population genetic thinking. I firmly believe the greatest benefit of population genetics is not knowledge of any particular approach or methodology (there are too many for any course to cover adequately), but a firm grasp of how population genetics can be used to 1) test and hone your intuition of evolutionary processes, 2) understand how (and why) different population genetics approaches work and 3) develop heuristics to examine any system of interest. Throughout the course we will examine classic population genetics results, read recent literature that either uses those results or throws them completely into question and work on developing a set of scripts and skills in a language of your choice (although I will recommend either Julia or R) to investigate the population genetics of different data-sets.\n\n\nSchedule/General Logistics\nEach week, we will start with a lecture on Tuesday, followed by a paper discussion and lab on Thursday. The goal of this class structure is to be able to introduce general concepts/remind you of things you should remember from your Genetics/Evolution courses, introduce classic PopGen results, followed by a more in-depth dive in the state of the art uses of those results and some practical advice of coding how they work. Here’s a general week-by-week overlay of the topics. Lecture notes will be added as links as we go along\n\n\n\nWeek\nTopic(s)\nReading\nLecture Notes\n\n\n\n\nAug 26-28\nIntro, Wright-Fisher\nLeu et al\nLecture 1\n\n\nSep 2-4\nGenetic diversity measurements\nBuffalo\nLecture 2\n\n\nSep 9-11\nDivergence at a site, mutation, molecular models of evolution\nPeede et al\n\n\n\nSep 16-18\nSexual reproduction, Recombination, LD\nHahn and Mishra\n\n\n\nSep 23-25\nPopulation structure, migration, differentiation\n\n\n\n\nSep 30-Oct 2\nSelection at a single locus, types of selection\n\n\n\n\nOct 7-9\nProject Meetings, no regular class\nNA\n\n\n\nOct 14-16\nThe Coalescent\n\n\n\n\nOct 21-23\nConfounded selection, demography, mutation\n\n\n\n\nOct 28-30\nCo-estimating selection and demography\n\n\n\n\nNov 4-6\nAncestral Recombination Graphs\n\n\n\n\nNov 11-13\nStudents’ choice\n\n\n\n\nNov 18-20\nStudents’ choice\n\n\n\n\nNov 25-27\nTHANKSGIVING BREAK\n\n\n\n\nDec 2-4\nProject meetings, final projects due Dec 4\nNA"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Labs",
    "section": "",
    "text": "Here you’ll find links for the labs on Thursdays, although they should all be available if you pull the latest version of the git before class time as well."
  },
  {
    "objectID": "labs.html#git",
    "href": "labs.html#git",
    "title": "Labs",
    "section": "Git?",
    "text": "Git?\nThe code for the class is hosted at: https://github.com/adagilis/PopGen25. Lab assignments will be placed in the creatively titled labs folder there. To get the latest version of the code, you’ll need to download it from git. The easiest way to do this is to clone the whole repository, and pull any changes before class time. If that doesn’t make sense to you, we’ll cover it in slightly more detail in class, or do some self study."
  },
  {
    "objectID": "labs.html#pluto",
    "href": "labs.html#pluto",
    "title": "Labs",
    "section": "Pluto",
    "text": "Pluto\nSome labs we will run using Pluto - an interactive notebook that uses Julia as the programming language, and will let us get on the same page faster for certain pieces of code.\nTo get runnning with Pluto, you’ll just want to follow the guide at Pluto’s website.\nOnce Pluto is running, load in the lab .jl file provided for each lab and we’ll work from there!"
  },
  {
    "objectID": "notes/Discussion2.html#richard-lewontin",
    "href": "notes/Discussion2.html#richard-lewontin",
    "title": "Discussion 2: Ne versus N",
    "section": "Richard Lewontin",
    "text": "Richard Lewontin\n\nLewontin is famous for a lot of things: levels of selection, niche construction, spandrels, etc.In our case - Lewontin’s Paradox"
  },
  {
    "objectID": "notes/Discussion2.html#lewontins-paradox",
    "href": "notes/Discussion2.html#lewontins-paradox",
    "title": "Discussion 2: Ne versus N",
    "section": "Lewontin’s Paradox",
    "text": "Lewontin’s Paradox\nVarious formulations, my preferred:\nPopulation sizes vary over ~10 orders of magnitude, mutation over ~3, but diversity only around 2. Why?\n\nFavorite pastime of population geneticists: come up with an explanation.\n\n\nDemography, selection, mutation bias."
  },
  {
    "objectID": "notes/Discussion2.html#demographic-explanations",
    "href": "notes/Discussion2.html#demographic-explanations",
    "title": "Discussion 2: Ne versus N",
    "section": "Demographic explanations",
    "text": "Demographic explanations\nPopulations fluctuate, and they never really recover to equilbrium state. Bigger pops fluctuate more.\n\nPopulations were tiny at time of speciation, and there’s enough speciation that you are never at equilbrium."
  },
  {
    "objectID": "notes/Discussion2.html#mutation-bias",
    "href": "notes/Discussion2.html#mutation-bias",
    "title": "Discussion 2: Ne versus N",
    "section": "Mutation bias",
    "text": "Mutation bias\nBigger populations have smaller mutation rates.\n\nMutations can only generate so much genetic diversity (caps at 3/4 for some models).\n\n\nGene conversion is biased?"
  },
  {
    "objectID": "notes/Discussion2.html#selection",
    "href": "notes/Discussion2.html#selection",
    "title": "Discussion 2: Ne versus N",
    "section": "Selection",
    "text": "Selection\nNearly-neutral theory\n\nHitchhiking\n\n\nBackground selection\n\n\nRecurrent sweeps"
  },
  {
    "objectID": "notes/Discussion2.html#discussion-today",
    "href": "notes/Discussion2.html#discussion-today",
    "title": "Discussion 2: Ne versus N",
    "section": "Discussion today",
    "text": "Discussion today\nAgain, in small groups:\n\nWhich reasons does Vince think are compelling explanations for LP?\nWhat reasons do you think best explain the paradox, and why?\nFor your favorite explanation, try to think of data you’d need to test it."
  },
  {
    "objectID": "notes/Lecture2.html#genetic-diversity-writ-large",
    "href": "notes/Lecture2.html#genetic-diversity-writ-large",
    "title": "Lecture 2",
    "section": "Genetic diversity writ large",
    "text": "Genetic diversity writ large\nLast week you learned how different evolutionary forces affect allele frequencies at a single site.\n\nThis week, we’ll be discussing how we can measure genetic diversity and what those measurements can tell us.\n\n\nWe will look at a few statistics that measure genetic diversity, notably the SFS, \\(\\pi\\), \\(\\theta_W\\) and \\(H\\).\n\n\nBefore that, we’ll talk about why we even care."
  },
  {
    "objectID": "notes/Lecture2.html#what-is-diversity-good-for",
    "href": "notes/Lecture2.html#what-is-diversity-good-for",
    "title": "Lecture 2",
    "section": "What is diversity good for?",
    "text": "What is diversity good for?\nEvolution is the change in traits of populations over generations\n\nChange is impossible if variation does not exist.\n\n\nGenetic variation allows for evolvability - without it populations are stuck.\n\n\nMost variation might in fact be deleterious in any particular environment.\n\n\nConversely, if the environment changes - old variants are unlikely to meet all of its needs."
  },
  {
    "objectID": "notes/Lecture2.html#where-does-diversity-come-from",
    "href": "notes/Lecture2.html#where-does-diversity-come-from",
    "title": "Lecture 2",
    "section": "Where does diversity come from?",
    "text": "Where does diversity come from?\nUltimately, all genetic diversity begins with mutation.\n\nA key quantity in population genetics is \\(\\theta\\) - the neutral genetic diversity.\n\n\nUnder Wright-Fisher: no new mutations being introduced. What is the long term expectation?\n\n\nLet’s first think about how to measure diversity."
  },
  {
    "objectID": "notes/Lecture2.html#measuring-diversity-at-a-site",
    "href": "notes/Lecture2.html#measuring-diversity-at-a-site",
    "title": "Lecture 2",
    "section": "Measuring diversity at a site",
    "text": "Measuring diversity at a site\nBefore we think about what’s happening across the genome, we can start by asking what is happening at an individual locus.\n\n\n\n\n\n\nRecall\n\n\nWe will refer to the allele frequency of the alternate allele at site \\(j\\) as \\(p\\).\n\n\n\nWhat are some ways we can ask how diverse a population is at a site?"
  },
  {
    "objectID": "notes/Lecture2.html#expected-heterozygosity-h",
    "href": "notes/Lecture2.html#expected-heterozygosity-h",
    "title": "Lecture 2",
    "section": "Expected Heterozygosity ( H )",
    "text": "Expected Heterozygosity ( H )\nOne of the simplest metrics is to ask how frequently we see individuals who are heterozygous.\n\nLet’s start by generalizing to any number of alleles.\n\n\n\\[\nH_j = 1 - \\sum_{i=1}^{k}{p_i^2}\n\\]\nWhere \\(p_i\\) is the frequency of the \\(i^{th}\\) allele and there are a total of \\(k\\) alleles.\n\n\nIf there are only two alleles:\n\\[1-p_a^2 -p_A^2 = 2p_a(1-p_a)\\]\n\n\nIn practice - often not the case: why?"
  },
  {
    "objectID": "notes/Lecture2.html#sample-heterozygosity-h",
    "href": "notes/Lecture2.html#sample-heterozygosity-h",
    "title": "Lecture 2",
    "section": "Sample heterozygosity (h)",
    "text": "Sample heterozygosity (h)\nAnother way to think about genetic diversity is to ask:\nWhat is the probability that if you sample any two alleles in the population, they are different.\n\nIn an infinite population with a biallelic site, this is simply \\(2p(2-p)\\)\n\n\nBut populations are not infinite, and we also don’t sample all possible individuals.\n\n\nInstead, we calculate the expected sample heterozygosity, and account for number of alleles sampled (\\(n\\)):\n\\[\nh_j=\\frac{n}{n-1}\\left(1-\\sum_i^k{p_i^2}\\right)\n\\]"
  },
  {
    "objectID": "notes/Lecture2.html#heterozygosity-and-drift",
    "href": "notes/Lecture2.html#heterozygosity-and-drift",
    "title": "Lecture 2",
    "section": "Heterozygosity and drift",
    "text": "Heterozygosity and drift\nWe saw last week how drift alone leads to evolutionary change by fixation and loss of alleles due to random chance.\n\nThis can lead to a change in heterozygosity that is quite predictable.\n\n\nAny generation, the given (true) heterozygosity is \\(H_t\\). What will it be in the next generation?\n\n\nWe can make our lives easier by looking at the inverse \\(\\mathscr{H}\\) : the Homozygosity of the population.\n\n\nUseful to know: \\(H = 1-\\mathscr{H}\\)."
  },
  {
    "objectID": "notes/Lecture2.html#how-does-drift-change-homozygosity",
    "href": "notes/Lecture2.html#how-does-drift-change-homozygosity",
    "title": "Lecture 2",
    "section": "How does drift change homozygosity?",
    "text": "How does drift change homozygosity?\nTwo ways for random pair of alleles to be identical:\n\n\n\n\n\n\n\nG\n\n\ncluster_0\n\nIdentical by descent\n\n\ncluster_1\n\nIdentical by state\n\n\n\na1\n\n\n\n\na2\n\n\n\n\nb1\n\n\n\n\na2-&gt;b1\n\n\n\n\n\nb2\n\n\n\n\na2-&gt;b2\n\n\n\n\n\nA1\n\n\n\n\nA2\n\n\n\n\nc1\n\n\n\n\nB1\n\n\n\n\nc1-&gt;B1\n\n\n\n\n\nc2\n\n\n\n\nB2\n\n\n\n\nc2-&gt;B2\n\n\n\n\n\nC1\n\n\n\n\nC2\n\n\n\n\n\n\n\n\n\nSo: \\(\\mathscr{H}_{t+1} = \\frac{1}{2N} + (1-\\frac{1}{2N})\\mathscr{H_t}\\)"
  },
  {
    "objectID": "notes/Lecture2.html#putting-it-together",
    "href": "notes/Lecture2.html#putting-it-together",
    "title": "Lecture 2",
    "section": "Putting it together",
    "text": "Putting it together\nThen:\n\\[\nH_{t+1} = 1-\\frac{1}{2N}-\\left(1-\\frac{1}{2N}\\right)\\left(1-H_t\\right)=\\left(1-\\frac{1}{2N}\\right)H_t\n\\]\nIn other words - drift causes heterozygosity to predictably decrease every generation (at a rate of \\(-\\frac{H}{2N}\\))"
  },
  {
    "objectID": "notes/Lecture2.html#lets-check-simulations",
    "href": "notes/Lecture2.html#lets-check-simulations",
    "title": "Lecture 2",
    "section": "Let’s check simulations",
    "text": "Let’s check simulations\nWe can take a look at our simulations:\n\nusing Plots, Measures, LaTeXStrings\ntheme(:solarized_light)\ndefault(legendfontsize=18,guidefontsize=18)\ninclude(\"../src/Pop_gen_code.jl\")\nsims = [WrightFisher(1000,0.5,1000) for _ in 1:500]\nh = broadcast(x -&gt; 2 .* x .*(1 .- x),sims)\np1 = plot(h,label=\"\",c=:black,alpha=0.2,\nxlabel=\"Generations\",ylabel=L\"H\",margins=4mm,size=(800,500))\nm = [mean(col) for col in eachcol(h)]\nplot!(p1,m,c=:red,label=\"Mean\",linewidth=2)"
  },
  {
    "objectID": "notes/Lecture2.html#versus-expectation",
    "href": "notes/Lecture2.html#versus-expectation",
    "title": "Lecture 2",
    "section": "Versus expectation:",
    "text": "Versus expectation:\n\nfunction exp_h(h,N,t)\n    hs = zeros(t)\n    hs[1] = h\n    for g in 1:(t-1)\n        hs[g+1] = (1-1/N)*hs[g]\n    end\n    return(hs)\nend\nplot!(p1,exp_h(0.5,1000,1000),label=\"Theory\",linewidth=2)"
  },
  {
    "objectID": "notes/Lecture2.html#how-quickly-does-heterozygosity-decay",
    "href": "notes/Lecture2.html#how-quickly-does-heterozygosity-decay",
    "title": "Lecture 2",
    "section": "How quickly does heterozygosity decay?",
    "text": "How quickly does heterozygosity decay?\nWill heterozygosity decrease faster in big or small populations? Why?"
  },
  {
    "objectID": "notes/Lecture2.html#heterozygosity-across-a-region",
    "href": "notes/Lecture2.html#heterozygosity-across-a-region",
    "title": "Lecture 2",
    "section": "Heterozygosity across a region",
    "text": "Heterozygosity across a region\nWe can then zoom out and ask what the diversity is across a whole region. Say there are \\(L\\) sites in your region, then the total polymorphism is given by:\n\\[\n\\pi = \\sum_{j=1}^{L}{h_j}\n\\]\n\nThe more common definition you’ll see is the per site polymorphism/heterozygosity, given as:\n\\[\n\\pi =  \\frac{1}{L}\\sum_{j=1}^{L}{h_j}\n\\]\nNote, often the two will be labeled as \\(\\pi\\), but per-site is far more common."
  },
  {
    "objectID": "notes/Lecture2.html#lets-check-some-intuition",
    "href": "notes/Lecture2.html#lets-check-some-intuition",
    "title": "Lecture 2",
    "section": "Let’s check some intuition",
    "text": "Let’s check some intuition\nHere, we’ll use the example data from Hahn’s textbook :\n\nhahn_data = \n[\"T\" \"T\" \"A\" \"C\" \"A\" \"A\" \"T\" \"C\" \"C\" \"G\" \"A\" \"T\" \"C\" \"G\" \"T\";\n \"-\" \"-\" \"A\" \"C\" \"G\" \"A\" \"T\" \"G\" \"C\" \"G\" \"C\" \"T\" \"C\" \"G\" \"T\";\n \"T\" \"C\" \"A\" \"C\" \"A\" \"A\" \"T\" \"G\" \"C\" \"G\" \"A\" \"T\" \"G\" \"G\" \"A\";\n \"T\" \"T\" \"A\" \"C\" \"G\" \"A\" \"T\" \"G\" \"-\" \"-\" \"C\" \"T\" \"C\" \"G\" \"T\"]\n[join(i) for i in eachrow(hahn_data)]\n\n4-element Vector{String}:\n \"TTACAATCCGATCGT\"\n \"--ACGATGCGCTCGT\"\n \"TCACAATGCGATGGA\"\n \"TTACGATG--CTCGT\"\n\n\nEach row is an individual, each column is a site. Notice how some sites have missing data “-”.\n\nWhat is the heterozygosity at the third site?\n\n\nHow can we account for missing data in calculating heterozygosity?"
  },
  {
    "objectID": "notes/Lecture2.html#code-examples",
    "href": "notes/Lecture2.html#code-examples",
    "title": "Lecture 2",
    "section": "Code examples",
    "text": "Code examples\nHahn’s alignment:\n\nusing StatsBase\n\nfunction sample_h(alleles)\n    obs_alleles=collect(skipmissing(alleles)) #Genotypes might be missing - we skip those.\n    n=length(obs_alleles)\n    freqs = values(countmap(obs_alleles)) ./ n #Get allele frequencies for each allele\n    return( n/(n-1)*(1-sum(freqs .^ 2))) #Return the expected sample h\nend\n\nfunction sample_π(genotype_matrix)\n    return(sum([sample_h(genotype_matrix[:,x]) for x in 1:size(genotype_matrix)[2]])/size(genotype_matrix)[2]) #Sum of h over all sites/number of sites\nend\n\nsample_π(replace(hahn_data,\"-\"=&gt;missing))\n\n0.23333333333333334\n\n\n#| echo: true\nusing StatsBase\n\nfunction sample_h(alleles)\n    obs_alleles=collect(skipmissing(alleles)) #Genotypes might be missing - we skip those.\n    n=length(obs_alleles)\n    freqs = values(countmap(obs_alleles)) ./ n #Get allele frequencies for each allele\n    return( n/(n-1)*(1-sum(freqs .^ 2))) #Return the expected sample h\nend\n\nfunction sample_π(genotype_matrix)\n    return(sum([sample_h(genotype_matrix[:,x]) for x in 1:size(genotype_matrix)[2]])/size(genotype_matrix)[2]) #Sum of h over all sites/number of sites\nend\n\nsample_π(replace(hahn_data,\"-\"=&gt;missing))"
  },
  {
    "objectID": "notes/Lecture2.html#what-should-pi-look-like",
    "href": "notes/Lecture2.html#what-should-pi-look-like",
    "title": "Lecture 2",
    "section": "What should \\(\\pi\\) look like?",
    "text": "What should \\(\\pi\\) look like?\nWe can use some baseline Wright-Fisher model with mutation assumptions to figure out what \\(\\pi\\) will be like in practice.\n\nLet’s say there are \\(N\\) individuals. The mutation rate is \\(\\mu\\). What is the expected heterozygosity?"
  },
  {
    "objectID": "notes/Lecture2.html#finding-steady-states",
    "href": "notes/Lecture2.html#finding-steady-states",
    "title": "Lecture 2",
    "section": "Finding steady-states",
    "text": "Finding steady-states\nOne way to solve modeling problems is to enumerate all of the forces acting on them, and find when the forces cancel each other out.\n\nHeterozygosity can increase because of mutation.\n\n\nHeterozygosity is lost because of drift (recall drift eventually causes alleles to be fixed/lost).\n\n\nHow strong are these forces?"
  },
  {
    "objectID": "notes/Lecture2.html#more-formally",
    "href": "notes/Lecture2.html#more-formally",
    "title": "Lecture 2",
    "section": "More formally",
    "text": "More formally\nLet \\(\\Delta H\\) be the change in heterozygosity from one generation to the next.\nThen:\n\\[\n\\Delta H = \\Delta mutation + \\Delta drift\n\\]\nAny individuals not heterozygous can become so via mutation at either of their two copies of the locus.\n\\[\n\\Delta mutation = (1-H)2\\mu\n\\]\nAnd drift cause the loss of heterozygosity at the rate we derived earlier:\n\\(\\Delta drift = -\\frac{H}{2N}\\)\nThen, at steady state:\n\\[\n0=(1-H)2\\mu-\\frac{H}{2N}\n\\]\nChalkboard time!"
  },
  {
    "objectID": "notes/Lecture2.html#expected-heterozygosity",
    "href": "notes/Lecture2.html#expected-heterozygosity",
    "title": "Lecture 2",
    "section": "Expected heterozygosity",
    "text": "Expected heterozygosity\nThe neutral expected heterozygosity is \\(4N\\mu\\). This is often called \\(\\theta\\).\n\nOf course, the quantity is different for haploids: \\(\\theta = 2N\\mu\\)\n\n\nDeviations from \\(\\theta\\) are expected to occur because of non Wright-Fisher dynamics.\n\n\nBut do populations actually show this much variation?"
  },
  {
    "objectID": "notes/Lecture2.html#some-examples",
    "href": "notes/Lecture2.html#some-examples",
    "title": "Lecture 2",
    "section": "Some examples",
    "text": "Some examples\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nRough N\nRough \\(\\mu\\)\nExpected \\(\\pi\\)\nMore accurate\nActual \\(\\pi\\)\n\n\n\n\nHomo sapiens\n\\(8.2 * 10^9\\)\n\\(1.4 * 10^{-8}\\)\n45.9\n0.997\n0.12-0.22\n\n\nDrosophila melanogaster\n\\(10^{15}\\)\n\\(10^{-8}\\)\n\\(10^7\\)\n0.99999999..\n0.1-0.4\n\n\nPelagibacter ubique\n\\(2.4 * 10^{28}\\)\n\\(10^{-6}\\)\n\\(10^{22}\\)\n1\n0.4-0.8"
  },
  {
    "objectID": "notes/Lecture2.html#effective-population-size-n_e",
    "href": "notes/Lecture2.html#effective-population-size-n_e",
    "title": "Lecture 2",
    "section": "Effective population size (\\(N_E\\))",
    "text": "Effective population size (\\(N_E\\))\nWe often refer not to the census population size, but the effective population size.\n\nThe idea is simple - not all individuals in a population actually mate and contribute to the next generation.\n\n\nThese individuals, from the perspective of evolutionary biology, might as well be dead/non-existant.\n\n\nThe effective population size is the size of a hypothetical population that evolves under WF dynamics."
  },
  {
    "objectID": "notes/Lecture2.html#implication-of-n_e",
    "href": "notes/Lecture2.html#implication-of-n_e",
    "title": "Lecture 2",
    "section": "Implication of \\(N_E\\)",
    "text": "Implication of \\(N_E\\)\n\\(N_E\\) implies that many individuals in a population don’t actually contribute to the species’ evolution.\n\nSome of this might be due to selection - individuals who simply die/don’t mate.\n\n\nThe quantity \\(\\frac{N_E}{N}\\) should tell you what fraction of individuals are surviving/contributing.\n\n\nMore thoughts about this for Thursday’s reading."
  },
  {
    "objectID": "notes/Lecture2.html#not-the-only-heterozygosity",
    "href": "notes/Lecture2.html#not-the-only-heterozygosity",
    "title": "Lecture 2",
    "section": "Not the only heterozygosity",
    "text": "Not the only heterozygosity\n\\(\\pi\\) is a commonly used estimator for genetic diversity, but it has some issues. The biggest is that when true diversity is high, variance in sample diversity is also really high. That is, it’s hard to get an accurate estimate.\n\nusing Plots, LaTeXStrings, Measures\nfunction var_pi(θ,n)\n    (n+1)/(3*(n-1))*θ+2(n^2+n+3)/(9*n*(n-1))*θ^2\nend\nns=range(10,1000,length=50)\nthetas = [var_pi.(theta,ns) for theta in [0.01,0.1,0.5,1.0]]\nplot(ns,thetas,xlabel=\"n\",ylabel=L\"Var(\\pi)\",label=[\"0.01\" \"0.1\" \"0.5\" \"1.0\"],margins=5mm)"
  },
  {
    "objectID": "notes/Lecture2.html#alternatives-to-pi-theta_w",
    "href": "notes/Lecture2.html#alternatives-to-pi-theta_w",
    "title": "Lecture 2",
    "section": "Alternatives to \\(\\pi\\) : \\(\\theta_W\\)",
    "text": "Alternatives to \\(\\pi\\) : \\(\\theta_W\\)\nOne common alternative is to use Watterson’s Theta. The idea is that we can simply look at the number of segregating sites \\(S\\) (sites with at least one variant). Because as we sample more individuals, we are more likely to sample a new allele, there is a correction factor:\n\\[\n\\theta_W = \\frac{S}{\\sum_{i=1}^{n-1}{1/i}}\n\\]\n#| echo: true\nfunction wat_theta(gm)\n    S = sum([is_segregating(i) for i in eachcol(gm)])\n    a = sum([1/i for i in 1:size(gm)[1]])\n    return(S/a)\nend"
  },
  {
    "objectID": "notes/Lecture2.html#theta_w---lower-variance-with-greater-sampling",
    "href": "notes/Lecture2.html#theta_w---lower-variance-with-greater-sampling",
    "title": "Lecture 2",
    "section": "\\(\\theta_W\\) - lower variance with greater sampling",
    "text": "\\(\\theta_W\\) - lower variance with greater sampling\nUnlike \\(\\pi\\), \\(\\theta_W\\) shows a nice decrease in sample variance with more samples.\n\nfunction theta_var(n,theta)\n    vars =sum([theta/i for i in 1:(n-1)])+sum([theta^2/(i^2) for i in 1:(n-1)])\n    a = sum([1/i for i in 1:(n-1)])\n    return(vars/(a^2))\nend\n\nthetas_w = [theta_var.(ns,i) for i in [0.01,0.1,0.5,1.0]]\nplot(ns,thetas_w,xlabel=\"n\",ylabel=L\"Var(\\theta_W)\",label=[\"0.1\" \"1\" \"5\" \"10\"],margins=5mm)"
  },
  {
    "objectID": "notes/Lecture2.html#why-is-theta_w-not-the-standard",
    "href": "notes/Lecture2.html#why-is-theta_w-not-the-standard",
    "title": "Lecture 2",
    "section": "Why is \\(\\theta_W\\) not the standard?",
    "text": "Why is \\(\\theta_W\\) not the standard?\nAccuracy from sample size is not the only potential issue:\n\n\\(\\theta_W\\) is not robust to other sources of errors:\n\nmissing data\nsequencing error\nuneven sampling\n\n\n\nIn practice, it’s often good to be able to look at multiple different estimators, and make informed conclusions about the data from them."
  },
  {
    "objectID": "notes/Lecture2.html#tajimas-d",
    "href": "notes/Lecture2.html#tajimas-d",
    "title": "Lecture 2",
    "section": "Tajima’s D",
    "text": "Tajima’s D\nIn fact, we’ll later cover how expected differences between \\(\\pi\\) and \\(\\theta_W\\) can be used to examine population demographic history.\n\nFor now - let’s keep thinking about how to summarize genetic variation in a population."
  },
  {
    "objectID": "notes/Lecture2.html#single-data-point-for-whole-genome",
    "href": "notes/Lecture2.html#single-data-point-for-whole-genome",
    "title": "Lecture 2",
    "section": "Single data point for whole genome?",
    "text": "Single data point for whole genome?\n\\(\\theta\\), \\(\\pi\\), \\(h\\) and similar are summary statistics - they reduce potentially huge amounts of data into a single number. That can be useful, but sometimes it’s better to look at a denser view of the data. Let’s make a larger/more complicated data-set.\n\ninclude(\"../src/Pop_gen_code.jl\")\ninclude(\"../src/Stats_utilities.jl\")\nancestral=vec(fake_alignment(1,10000))\n#Just to make the PCA more exciting later - generate two \"independent\" pops here, one of which willl be more diverged within a middle chunk of the data.\npop1 = fake_alignment_biallelic(ancestral,50;gaps=0.01,adj=30)\npop2_1 = fake_alignment_biallelic(ancestral[1:4450],50;gaps=0.01)\npop2_2 = vcat(fake_alignment(10,500),fake_alignment_biallelic(ancestral[4451:4950],40;gaps=0,adj=50))\npop2_3 = fake_alignment_biallelic(ancestral[4951:10000],50;gaps=0.01)\npop2 = hcat(pop2_1,pop2_2,pop2_3)\ngeno_matrix = vcat(pop1,pop2)\n[join(replace(i,missing=&gt;\"-\")) for i in eachrow(geno_matrix)]\n\n100-element Vector{String}:\n \"AAGTTCGTACGCAAAGATCCCTGCTTTCGA\" ⋯ 9940 bytes ⋯ \"C-AGTAAAGGTTTGCTCCTGGCTAAACATA\"\n \"ATGTATGTACGCAAAGATCCGTGCGTTCGT\" ⋯ 9940 bytes ⋯ \"CTAGTAAAGGATGTCTACTCGCTAAACATG\"\n \"ATGTTTGTACGCAAAGATCCCTTCGTACGT\" ⋯ 9940 bytes ⋯ \"CATGTAAAGG-TTTCTCCTGGCTAAACAG-\"\n \"ATGTACGTACGCAAAGATC-CGTCGTTCGA\" ⋯ 9940 bytes ⋯ \"CATGTAAAGGTTGTCTCCGGGCGAAACAGA\"\n \"-TGTTTGTACGCAAAGATCCCTTCGTTCGA\" ⋯ 9940 bytes ⋯ \"CAAGTAAAGGATTTCTCCTGGCTAAACAGG\"\n \"AAGTTTGTACGC-AATATCCGTTCGTACGA\" ⋯ 9940 bytes ⋯ \"CATGTA-CGGTTTTCTCCTGGCTAAACATG\"\n \"AAGTTTGTAC-CAAAGATCCGTTCGTACGA\" ⋯ 9940 bytes ⋯ \"CAAGTAACGGATGGCTCCTGGCTAAACATG\"\n \"ATGTTTGTACGCAAAGATCAGTTCGGTCAA\" ⋯ 9940 bytes ⋯ \"CATGTAACGGA-GGCTCCTGGCTAAACAGG\"\n \"ATGTTTGTACGCAACGATCCGTTCGTTCGA\" ⋯ 9940 bytes ⋯ \"CTAGTAAAGGATTTCTCCTGGCTAAACATG\"\n \"ATGTACGTACGCAAAGATCCGTTCGTACGA\" ⋯ 9940 bytes ⋯ \"AAAGTAACGGATTTC-CCTGGCTAAACAGG\"\n ⋮\n \"ATGTTTGGACGCATACATTTATACGTTCCA\" ⋯ 9940 bytes ⋯ \"CTAGTAACGGTTTTCTCCTG-CACAATTTA\"\n \"GTATTTAGACGCATACATTCATACGATAGA\" ⋯ 9940 bytes ⋯ \"CTAGTAACGGTTTTCTCCTGGCTCAATTTG\"\n \"ATGTTTAGACGCATACATTCATACGTTCGA\" ⋯ 9940 bytes ⋯ \"CAAGTAACGGTTTTCGCCTGGCACAACTTA\"\n \"GTGTTTAGACGCATACATTTGTAGGTTAGA\" ⋯ 9940 bytes ⋯ \"CAAGTAACGGTTTTCTCCTGGAAAAATTTG\"\n \"ATGTTTGGATGCCTACATTTATAGGTTCGA\" ⋯ 9940 bytes ⋯ \"CTAGTAACGGTTTTCTCCTGGCTCAATTTA\"\n \"ATGTTTATACGCATACATTCGTAGGATC-A\" ⋯ 9940 bytes ⋯ \"CAAGTAACGGTTTTCTCCTGACAAAATTAG\"\n \"ATGTTAGGACGGATACAT-CATTCGATACA\" ⋯ 9940 bytes ⋯ \"CTAGTAAC-GTTTTCTCCTCGCTCAATTTG\"\n \"ATGTTTGGACGCATAGATTTATACGATCGA\" ⋯ 9940 bytes ⋯ \"GTAGTAACGGTTTTCTCCTGGCTCAATAAG\"\n \"GTGTTTGGACGGATTCATTCGTAGGTTAGG\" ⋯ 9940 bytes ⋯ \"CAAGTAACGGTTTACTCCTGGCTAAATTTG\""
  },
  {
    "objectID": "notes/Lecture2.html#windowed-statistics",
    "href": "notes/Lecture2.html#windowed-statistics",
    "title": "Lecture 2",
    "section": "Windowed statistics",
    "text": "Windowed statistics\n\nfunction window_map(f,data,wnd_size)\n    start = 1\n    stop = start+wnd_size\n    centers = []\n    result = []\n    while(stop &lt; size(data)[2])\n        append!(centers,(start+stop)/2)\n        append!(result,f(data[:,start:stop]))\n        start = stop\n        stop = start + wnd_size\n    end\n    return(centers,result)\nend\nscatter([sample_h(i) for i in eachcol(geno_matrix)],\nlabel=\"\",\nxlabel=\"Window Center\",\nylabel=L\"\\pi\",\nsize=(1000,500),margins=5mm,legend=:outertopright;\nmarkersize=1,markerstrokewidth=0)\nplot!(window_map(sample_π,geno_matrix,1000),label=\"Windowed (1000)\",linewidth=1.5,linecolor=:black)\nplot!(window_map(sample_π,geno_matrix,500),label=\"Windowed (500)\",linewidth=1.5,linecolor=:red)"
  },
  {
    "objectID": "notes/Lecture2.html#but-window-choice-not-arbitrary",
    "href": "notes/Lecture2.html#but-window-choice-not-arbitrary",
    "title": "Lecture 2",
    "section": "But window choice not arbitrary",
    "text": "But window choice not arbitrary\nAs we’ll discuss in the next lecture: our choice of windows might depend on factors like recombination rate.\n\nFrequently, studies use a single window value. But different parts of the genome have different degrees of LD, mutation, recombination.\n\n\nIn general - good idea to run a sliding window analysis."
  },
  {
    "objectID": "notes/Lecture2.html#sliding-windows",
    "href": "notes/Lecture2.html#sliding-windows",
    "title": "Lecture 2",
    "section": "Sliding windows",
    "text": "Sliding windows\n\nfunction sliding_window_map(f,data,wnd_size,wnd_step;first_pos=0)\n    start = 1\n    stop = start+wnd_size\n    centers = []\n    result = []\n    while(stop &lt; size(data)[2])\n        append!(centers,(start+stop)/2)\n        append!(result,f(data[:,start:stop]))\n        start = start + wnd_step\n        stop = start + wnd_size\n    end\n    return(centers .+ first_pos,result)\nend\n\nxlims!(4000,6000)\nylims!(0.2,0.4)\nplot!(sliding_window_map(sample_π,geno_matrix[:,3000:7000],1000,50;first_pos=3000),label=\"Sliding (1000,50)\",linewidth=2)\nplot!(sliding_window_map(sample_π,geno_matrix[:,3500:6500],500,25;first_pos=3500),label=\"Sliding (500,25)\",linewidth=2)\nplot!(sliding_window_map(sample_π,geno_matrix[:,3750:6250],250,10;first_pos=3750),label=\"Sliding (250,10)\",linewidth=2)"
  },
  {
    "objectID": "notes/Lecture2.html#longer-alignment---more-information",
    "href": "notes/Lecture2.html#longer-alignment---more-information",
    "title": "Lecture 2",
    "section": "Longer alignment - more information",
    "text": "Longer alignment - more information\nOne good way to represent a whole region is to summarize the allele frequencies at each site. This is called the Site Frequency Spectrum, or (Allele Frequency Spectrum). In our complicated alignment, it helps us see the frequency of different alleles."
  },
  {
    "objectID": "notes/Lecture2.html#sfs-example",
    "href": "notes/Lecture2.html#sfs-example",
    "title": "Lecture 2",
    "section": "SFS example:",
    "text": "SFS example:"
  },
  {
    "objectID": "notes/Lecture2.html#allele-polarity-ancestral-state",
    "href": "notes/Lecture2.html#allele-polarity-ancestral-state",
    "title": "Lecture 2",
    "section": "Allele polarity: ancestral state",
    "text": "Allele polarity: ancestral state\nWhen you don’t know what the ancestral allele is, you generally examine the minor allele frequency (whichever is rarer.\n\nThis results in a folded SFS.\n\n\nBut, if you have an outgroup/ancestral data, you can instead use the full SFS."
  },
  {
    "objectID": "notes/Lecture2.html#unfolded-sfs",
    "href": "notes/Lecture2.html#unfolded-sfs",
    "title": "Lecture 2",
    "section": "Unfolded SFS",
    "text": "Unfolded SFS\n\nfunction SFS(geno_matrix)\n    #This assumes the ancestral sequence is labeled as \"1\", diverged as greater ints.\n    return([countmap(i)[1]/length(i) for i in eachcol(geno_matrix)])\nend\n\n#In this case, we'll take a random sample from pop 1 as the \"ancestor\"\ngm_matrix = geno_mat_to_Int(geno_matrix)\n\nhistogram(SFS(only_segregating(gm_matrix)),legend=false,xlabel=\"Derived Allele Frequency\",ylabel=\"Count\",margins=5mm,bins=50,size=(1000,500))"
  },
  {
    "objectID": "notes/Lecture2.html#what-do-you-do-with-the-sfs",
    "href": "notes/Lecture2.html#what-do-you-do-with-the-sfs",
    "title": "Lecture 2",
    "section": "What do you do with the SFS",
    "text": "What do you do with the SFS\nOne of the uses of the SFS is, ironically, to calculate summary statistics.\n\nSome, like \\(\\theta_H\\) estimate the genetic diversity.\n\n\nOthers, like Tajima’s D let you estimate the influence of demography on the population.\n\n\nOnce we talk about demography estimation - SFS contains most data needed."
  },
  {
    "objectID": "notes/Lecture2.html#how-is-variation-distributed-among-individuals",
    "href": "notes/Lecture2.html#how-is-variation-distributed-among-individuals",
    "title": "Lecture 2",
    "section": "How is variation distributed among individuals?",
    "text": "How is variation distributed among individuals?\nWe can now say something about how genetic variation is sumarised across a population. But this gives us very little information about how the variation is distributed within each individual.\nFor instance, if overall \\(\\pi\\) is high - does that mean that every individual is likely to be heterozygous?"
  },
  {
    "objectID": "notes/Lecture2.html#summarizing-complex-data-pca",
    "href": "notes/Lecture2.html#summarizing-complex-data-pca",
    "title": "Lecture 2",
    "section": "Summarizing complex data: PCA",
    "text": "Summarizing complex data: PCA\nPrincipal component analysis (PCA) is an approach to take complex, highly dimensional data (like the genotypes of a bunch of individuals at very many sites), and reduce it to something simpler.\n\nusing MultivariateStats\nx = randn(1000)\ny = x+randn(1000)\n\npca_test_plot=scatter(x,y,leg=false,size=(900,500),xlabel=\"X\",ylabel=\"Y\",margins=4mm)"
  },
  {
    "objectID": "notes/Lecture2.html#pc1-identifies-the-axis-of-highest-variability",
    "href": "notes/Lecture2.html#pc1-identifies-the-axis-of-highest-variability",
    "title": "Lecture 2",
    "section": "PC1 identifies the axis of highest variability",
    "text": "PC1 identifies the axis of highest variability\n\npca_m = fit(PCA,transpose(hcat(x,y)))\nplot!(pca_test_plot,i-&gt;i*scaled_loadings(pca_m)[1,1],-4,4)"
  },
  {
    "objectID": "notes/Lecture2.html#each-pc-explains-the-next-most-variation",
    "href": "notes/Lecture2.html#each-pc-explains-the-next-most-variation",
    "title": "Lecture 2",
    "section": "Each PC explains the next most variation",
    "text": "Each PC explains the next most variation\nWhen data fits PCA assumptions, each subsequent PC explains the next most variance.\n\nTechnical details: the first principal component is the eigenvector of the correspondingly largest eigenvalue of a covariance matrix between data points.\n\n\ni.e.: You correlate all data points, and ask what linear transformations explain the covariation. This in turn explains the most variation in the data."
  },
  {
    "objectID": "notes/Lecture2.html#works-in-genomic-data-too",
    "href": "notes/Lecture2.html#works-in-genomic-data-too",
    "title": "Lecture 2",
    "section": "Works in genomic data too!",
    "text": "Works in genomic data too!\nHere’s our toy sequence data along the first two PCs.\n\ngm_matrix = geno_mat_to_Int(vcat(reshape(ancestral,1,length(ancestral)),geno_matrix))\ngm_PCA = fit(PCA,gm_matrix[2:101,:])\nproc = round.(gm_PCA.prinvars/sum(gm_PCA.prinvars)*100;digits=2)\nlab =  string.(proc)\nscatter(gm_PCA.proj[:,1],gm_PCA.proj[:,2],leg=false,size=(1000,500),\n    xlabel=\"PC 1 (\"*lab[1]*\" %)\",ylabel=\"PC 2 (\"*lab[2]*\" %)\",margins=5mm)"
  },
  {
    "objectID": "notes/Lecture2.html#is-pca-always-worth-it",
    "href": "notes/Lecture2.html#is-pca-always-worth-it",
    "title": "Lecture 2",
    "section": "Is PCA always worth it?",
    "text": "Is PCA always worth it?\nHow do you know how many PCs are “enough” to describe your data?\n\nPCA significance can be evaluated using the broken stick model.\n\n\nIf you choose n random break points of a stick of length 1, then the size of these segments follows a typical distribution:\n\nscatter(reverse([broken_stick_dist(i,10) for i in 1:10]),legend=false,xlabel=\"PC\",ylabel=\"Variance explained\",margins=5mm,size=(800,400),xticks=(1:10))"
  },
  {
    "objectID": "notes/Lecture2.html#how-does-that-compare-to-our-toy-sequence-data",
    "href": "notes/Lecture2.html#how-does-that-compare-to-our-toy-sequence-data",
    "title": "Lecture 2",
    "section": "How does that compare to our toy sequence data?",
    "text": "How does that compare to our toy sequence data?\n\np2 = scree(gm_PCA;broken_stick=true)\nplot(p2,size=(800,600))"
  },
  {
    "objectID": "notes/Lecture2.html#pca-can-be-deceiving",
    "href": "notes/Lecture2.html#pca-can-be-deceiving",
    "title": "Lecture 2",
    "section": "PCA can be deceiving!",
    "text": "PCA can be deceiving!\nUnequal sampling can make it seem like one subgroup has all the “important” variation, but they are just sampled better.\n\nSamples from different time points can create illusion of similarity between populations/individuals.\n\n\nInteresting variation is not necessarily along the first PC axis.\n\n\nIn this case: 500 bp bit of basically random sequence in 10 individuals in pop2."
  },
  {
    "objectID": "notes/Lecture2.html#other-ways-of-thinking-about-genetic-variation",
    "href": "notes/Lecture2.html#other-ways-of-thinking-about-genetic-variation",
    "title": "Lecture 2",
    "section": "Other ways of thinking about genetic variation",
    "text": "Other ways of thinking about genetic variation\nWe’ve considered how much variability there is at a locus/across the genome.\n\nWe’ve considered how that variation might be partitioned among all the samples.\n\n\nLet’s ask how variation might be partitioned within a population."
  },
  {
    "objectID": "notes/Lecture2.html#f-statistics-inbreeding-coefficients",
    "href": "notes/Lecture2.html#f-statistics-inbreeding-coefficients",
    "title": "Lecture 2",
    "section": "\\(F\\)-statistics (inbreeding coefficients)",
    "text": "\\(F\\)-statistics (inbreeding coefficients)\nWe’ve talked a lot about expected heterozygosity, but actual observed heterozygosity is also informative.\n\nLet \\(F\\) be the coefficient of inbreeding (the probability that any two alleles are identical by descent).\n\n\nThen:\n\\[\n\\begin{cases}\np_{AA} = p^2(1-F)+pF \\\\\np_{Aa} = 2pq(1-F) \\\\\np_{aa} = q^2(1-F)+qF \\\\\n\\end{cases}\n\\]\n\n\nIn other words - the frequency of heterozygotes is decreased, while homozygotes increase.\n\n\nWhat should \\(F\\) be in Wright-Fisher?"
  },
  {
    "objectID": "notes/Lecture2.html#f_is---inbreeding-statistic",
    "href": "notes/Lecture2.html#f_is---inbreeding-statistic",
    "title": "Lecture 2",
    "section": "\\(F_{IS}\\) - Inbreeding statistic",
    "text": "\\(F_{IS}\\) - Inbreeding statistic\nWright realized you could measure how inbred a population is by comparing the Observed Heterozygosity \\(H_{obs}\\) with Expected Heterozygosity \\(H_{exp}\\). For any locus, the inbreeding coefficient can be found as:\n\n\\[\nF = \\frac{H_{obs}}{H_{exp}}=\\frac{P_{Aa}}{2pq}\n\\]\n\n\nTo actually study inbreeding it’s more useful to examine this across the whole genome rather than a single locus."
  },
  {
    "objectID": "notes/Lecture2.html#case-study",
    "href": "notes/Lecture2.html#case-study",
    "title": "Lecture 2",
    "section": "Case study",
    "text": "Case study\nLet’s look at a case study of some allele data:\n\n\n\nLocus\nAA\nAa\naa\nTotal\n\n\n\n\nWing spotting\n1610\n302\n88\n2000\n\n\nEye distortion\n1215\n508\n277\n2000\n\n\nJawless mouth\n200\n1450\n450\n2000\n\n\n\n\nShould get: 0.28, 0.34, -0.4"
  },
  {
    "objectID": "notes/Lecture2.html#are-any-of-these-significant-deviations",
    "href": "notes/Lecture2.html#are-any-of-these-significant-deviations",
    "title": "Lecture 2",
    "section": "Are any of these significant deviations?",
    "text": "Are any of these significant deviations?\nSimple to test if population is statistically deviating from HW (\\(\\chi^2\\) tests, for instance).\n\nRule of thumb - differences w/in 5% of expectation (e.g. \\(F_{IS} ~0.05\\)) happen in neutral simulations all of the time.\n\n\nBigger differences - actually perform testing."
  },
  {
    "objectID": "notes/Lecture2.html#inbred-population-or-inbred-individuals",
    "href": "notes/Lecture2.html#inbred-population-or-inbred-individuals",
    "title": "Lecture 2",
    "section": "Inbred population, or inbred individuals?",
    "text": "Inbred population, or inbred individuals?\nOne way to look for individuals who may be inbred is to look for Runs of Homozygosity (ROH)\n\nWe’ll talk more when we cover LD and recombination, but not only should inbred individuals have more homozygous alleles than expected, these alleles should also be clustered."
  },
  {
    "objectID": "notes/Lecture2.html#rate-of-allele-fixation",
    "href": "notes/Lecture2.html#rate-of-allele-fixation",
    "title": "Lecture 2",
    "section": "Rate of allele fixation",
    "text": "Rate of allele fixation\nRecall that any new allele that’s starting at frequency \\(\\frac{1}{2N_E}\\) also has a probability of \\(\\frac{1}{2N_E}\\) of becoming fixed.\n\nLet’s say there are lots of these mutations, each with probability of \\(\\frac{1}{2N_E}\\) of becoming fixed. How long do we have to wait until an allele is fixed?\n\n\nIf they evolve independently, this is just the geometric probability distribution: takes a rate parameter == chance of success.\n\n\nSo, on average of \\(2N_E\\) generations for a mutation to fix, and each generation \\(\\frac{1}{2N_E}\\) mutations fix."
  },
  {
    "objectID": "notes/Lecture2.html#but-there-are-not-infinite-mutations",
    "href": "notes/Lecture2.html#but-there-are-not-infinite-mutations",
    "title": "Lecture 2",
    "section": "But there are not infinite mutations",
    "text": "But there are not infinite mutations\n\nHow many new alleles come in every generation?\n\n\nThere are \\(2N_E\\) copies of the allele. Then - there are \\(2N_E\\mu\\) new mutations every generation."
  },
  {
    "objectID": "notes/Lecture2.html#putting-it-together---the-basics-of-neutral-theory",
    "href": "notes/Lecture2.html#putting-it-together---the-basics-of-neutral-theory",
    "title": "Lecture 2",
    "section": "Putting it together - the basics of neutral theory",
    "text": "Putting it together - the basics of neutral theory\nIf we put all of this together, the rate of fixing mutations becomes quite predictable:\nEvery generation there are \\(2N_E\\mu\\) mutations coming in that are fixed at a rate of \\(\\frac{1}{2N_E}\\)\nThe neutral evolutionary rate is therefore:\n\\[\n\\frac{2N_E\\mu}{2N_E} = \\mu\n\\]"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Useful links",
    "section": "",
    "text": "This page will slowly be populated by useful pieces of software, guides, tutorials and other little bits that you might find useful for self-study or use in your projects.\n\nJulia - this is the programming language I will be writing most code in. If you’d like to get started with Julia but have no prior programming experience, check out this guide. On the other hand, if you already know how to program and want to know why Julia might be a good fit for you, check out this more advanced guide.\nIntroduction to the shell - For those of you who have never used CLIs (command-line-interfaces), it might be useful to take a look at Software Carpentry’s guide to the Unix shell: link.\nIf you are a Windows user and are not sure how to access the Unix shell - link."
  }
]